{"version":3,"file":"bundle.cjs","sources":["../src/components/datagrid/style/cell.js","../src/components/datagrid/style/core.js","../src/components/datagrid/style/row.js","../src/components/datagrid/formatters/checkboxFormatter.js","../src/components/datagrid/hooks/useLayoutEffect.js","../src/components/datagrid/hooks/useFocusRef.js","../src/components/datagrid/DataGridDefaultComponentsProvider.js","../src/components/datagrid/formatters/SelectCellFormatter.js","../src/components/datagrid/formatters/valueFormatter.js","../src/components/datagrid/formatters/toggleGroupFormatter.js","../src/components/datagrid/Columns.js","../src/components/datagrid/utils/colSpanUtils.js","../src/components/datagrid/utils/domUtils.js","../src/components/datagrid/utils/keyboardUtils.js","../src/components/datagrid/utils/renderMeasuringCells.js","../src/components/datagrid/utils/selectedCellUtils.js","../src/components/datagrid/utils/styleUtils.js","../src/components/datagrid/utils/index.js","../src/components/datagrid/editors/textEditor.js","../src/components/datagrid/hooks/useCalculatedColumns.js","../src/components/datagrid/hooks/useGridDimensions.js","../src/components/datagrid/hooks/useLatestFunc.js","../src/components/datagrid/hooks/useRovingCellRef.js","../src/components/datagrid/hooks/useRowSelection.js","../src/components/datagrid/hooks/useViewportColumns.js","../src/components/datagrid/hooks/useViewportRows.js","../src/components/datagrid/filterContext.js","../src/components/datagrid/headerRenderer.js","../src/components/datagrid/HeaderCell.js","../src/components/datagrid/HeaderRow.js","../src/components/datagrid/Cell.js","../src/components/datagrid/Row.js","../src/components/datagrid/GroupCell.js","../src/components/datagrid/GroupRow.js","../src/components/datagrid/SummaryCell.js","../src/components/datagrid/SummaryRow.js","../src/components/datagrid/EditCell.js","../src/components/datagrid/DragHandle.js","../src/components/datagrid/sortStatus.js","../src/components/datagrid/exportUtils.js","../src/components/datagrid/ExportData.js","../src/components/datagrid/DataGrid.js"],"sourcesContent":["import React from \"react\";\r\nimport { css } from \"@linaria/core\";\r\n\r\nexport const cell = css`\r\n  @layer rdg.Cell {\r\n    /* max-content does not work with size containment\r\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\r\n     * Chromium bug: at odd zoom levels or subpixel positioning, layout/paint containment can make cell borders disappear\r\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\r\n     */\r\n    contain: style;\r\n    position: relative; /* needed for absolute positioning to work */\r\n    padding-block: 0;\r\n    padding-inline: 6px;\r\n    border-inline-end: 1px solid var(--rdg-border-color);\r\n    border-block-end: 1px solid var(--rdg-border-color);\r\n    grid-row-start: var(--rdg-grid-row-start);\r\n    background-color: inherit;\r\n    text-align: center;\r\n\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    overflow: clip;\r\n    text-overflow: ellipsis;\r\n    outline: none;\r\n\r\n    &[aria-selected=\"true\"] {\r\n      outline: 1px solid var(--rdg-selection-color);\r\n      outline-offset: -1px;\r\n    }\r\n    & > div {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      height: 100%;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const cellClassname = `rdg-cell ${cell}`;\r\n\r\nexport const cellFrozen = css`\r\n  @layer rdg.Cell {\r\n    position: sticky;\r\n    /* Should have a higher value than 0 to show up above unfrozen cells */\r\n    z-index: 1;\r\n  }\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\r\n\r\nexport const cellFrozenLast = css`\r\n  @layer rdg.Cell {\r\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\r\n\r\nexport const cellEditorClassname = css`\r\n  @layer rdg.Cell {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n  }\r\n`;\r\nexport const rowIsSelected = css`\r\n  @layer rdg.Cell {\r\n    border-block-start: 1px solid #9bbb59;\r\n    border-block-end: 1px solid #9bbb59;\r\n  }\r\n`;\r\nexport const rowIsSelectedClassName = `rdg-middle-row-is-selected ${rowIsSelected}`;\r\nexport const topRowIsSelected = css`\r\n  @layer rdg.Cell {\r\n    border-block-end: 1px solid #9bbb59;\r\n  }\r\n`;\r\nexport const topRowIsSelectedClassName = `rdg-top-row-is-selected ${topRowIsSelected}`;\r\nexport const bottomRowIsSelected = css`\r\n  @layer rdg.Cell {\r\n    border-block-start: 1px solid #9bbb59;\r\n  }\r\n`;\r\nexport const bottomRowIsSelectedClassName = `rdg-bottom-row-is-selected ${bottomRowIsSelected}`;\r\n","import React from \"react\";\r\nimport { css } from \"@linaria/core\";\r\nimport { row } from \"./row\";\r\n\r\nconst lightTheme = `\r\n  --rdg-color: #000;\r\n  --rdg-border-color: #FFFFFF;\r\n  --rdg-summary-border-color: #aaa;\r\n  --rdg-background-color: hsl(0deg 0% 100%);\r\n  --rdg-header-background-color: #16365D;\r\n  --rdg-header-row-color: #FFFFFF;\r\n  --rdg-row-hover-background-color: #D7E3BC;\r\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\r\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\r\n\r\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\r\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\r\n  --rdg-checkbox-disabled-border-color: #ccc;\r\n  --rdg-checkbox-disabled-background-color: #ddd;\r\n`;\r\n\r\nconst darkTheme = `\r\n  --rdg-color: #ddd;\r\n  --rdg-border-color: #FFFFFF;\r\n  --rdg-summary-border-color: #555;\r\n  --rdg-background-color: hsl(0deg 0% 13%);\r\n  --rdg-header-background-color: #16365D;\r\n  --rdg-row-hover-background-color: #D7E3BC;\r\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\r\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\r\n\r\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\r\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\r\n  --rdg-checkbox-disabled-border-color: #000;\r\n  --rdg-checkbox-disabled-background-color: #333;\r\n`;\r\n\r\nconst root = css`\r\n  @layer rdg {\r\n    @layer Defaults,\r\n      FocusSink,\r\n      CheckboxInput,\r\n      CheckboxIcon,\r\n      CheckboxLabel,\r\n      Cell,\r\n      HeaderCell,\r\n      SummaryCell,\r\n      EditCell,\r\n      Row,\r\n      HeaderRow,\r\n      SummaryRow,\r\n      GroupedRow,\r\n      Root;\r\n\r\n    @layer Defaults {\r\n      *,\r\n      *::before,\r\n      *::after {\r\n        box-sizing: inherit;\r\n      }\r\n    }\r\n    .rdg-row-even,\r\n    .rdg-row-summary-row-even,\r\n    .rdg-row-groupRow-even {\r\n      background-color: #e5edf8;\r\n    }\r\n    .rdg-row-odd,\r\n    .rdg-row-summary-row-odd,\r\n    .rdg-row-groupRow-odd {\r\n      background-color: #f3f8fc;\r\n    }\r\n    .rdg-row-selected {\r\n      background-color: #ebf1dd;\r\n    }\r\n\r\n    @layer Root {\r\n      ${lightTheme}\r\n      --rdg-selection-color: #66afe9;\r\n      --rdg-font-size: 11px;\r\n\r\n      display: grid;\r\n\r\n      color-scheme: var(--rdg-color-scheme, light dark);\r\n\r\n      /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\r\n      /* We set a stacking context so internal elements don't render on top of external elements. */\r\n      contain: strict;\r\n      content-visibility: auto;\r\n      block-size: 350px;\r\n      border: 1px solid var(--rdg-border-color);\r\n      box-sizing: border-box;\r\n      overflow: auto;\r\n      background-color: var(--rdg-background-color);\r\n      color: var(--rdg-color);\r\n      font-size: var(--rdg-font-size);\r\n      font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\r\n\r\n      /* needed on Firefox */\r\n      &::before {\r\n        content: \"\";\r\n        grid-column: 1/-1;\r\n        grid-row: 1/-1;\r\n      }\r\n\r\n      &.rdg-dark {\r\n        --rdg-color-scheme: dark;\r\n        ${darkTheme}\r\n      }\r\n\r\n      &.rdg-light {\r\n        --rdg-color-scheme: light;\r\n      }\r\n\r\n      @media (prefers-color-scheme: dark) {\r\n        &:not(.rdg-light) {\r\n          ${darkTheme}\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const rootClassname = `rdg ${root}`;\r\n\r\nconst viewportDragging = css`\r\n  @layer rdg.Root {\r\n    user-select: none;\r\n\r\n    & .${row} {\r\n      cursor: move;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\r\n\r\nexport const focusSinkClassname = css`\r\n  @layer rdg.FocusSink {\r\n    grid-column: 1/-1;\r\n    pointer-events: none;\r\n    /* Should have a higher value than 2 to show up above header row */\r\n    z-index: 3;\r\n  }\r\n`;\r\n\r\nexport const filterColumnClassName = \"filter-cell\";\r\n\r\nexport const filterContainerClassname = css`\r\n  .${filterColumnClassName} {\r\n    line-height: 35px;\r\n    padding: 0;\r\n\r\n    > div {\r\n      padding-block: 0;\r\n      padding-inline: 8px;\r\n\r\n      &:last-child {\r\n        border-block-start: 1px solid var(--rdg-border-color);\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { css } from \"@linaria/core\";\r\n\r\nexport const row = css`\r\n  @layer rdg.Row {\r\n    display: contents;\r\n    line-height: var(--rdg-row-height);\r\n    background-color: var(--rdg-background-color);\r\n\r\n    &:hover {\r\n      background-color: var(--rdg-row-hover-background-color) !important;\r\n    }\r\n\r\n    &[aria-selected=\"true\"] {\r\n      background-color: #ebf1dd;\r\n      &:hover {\r\n        background-color: var(--rdg-row-selected-hover-background-color);\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const rowClassname = `rdg-row ${row}`;\r\n\r\nexport const rowSelected = css`\r\n  @layer rdg.FocusSink {\r\n    outline: 2px solid var(--rdg-selection-color);\r\n    outline-offset: -2px;\r\n  }\r\n`;\r\n\r\nexport const rowSelectedClassname = \"rdg-row-selected\";\r\n\r\nexport const rowSelectedWithFrozenCell = css`\r\n  @layer rdg.FocusSink {\r\n    &::before {\r\n      content: \"\";\r\n      display: inline-block;\r\n      height: 100%;\r\n      position: sticky;\r\n      inset-inline-start: 0;\r\n      border-inline-start: 2px solid var(--rdg-selection-color);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport clsx from \"clsx\"\r\nimport { css } from \"@linaria/core\"\r\n\r\nconst checkboxLabel = css`\r\n  @layer rdg.CheckboxLabel {\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: absolute;\r\n    inset: 0;\r\n    margin-inline-end: 1px; /* align checkbox in row group cell */\r\n  }\r\n`\r\n\r\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`\r\n\r\nconst checkboxInput = css`\r\n  @layer rdg.CheckboxInput {\r\n    all: unset;\r\n  }\r\n`\r\n\r\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`\r\n\r\nconst checkbox = css`\r\n  @layer rdg.CheckboxIcon {\r\n    content: \"\";\r\n    inline-size: 20px;\r\n    block-size: 20px;\r\n    border: 2px solid var(--rdg-border-color);\r\n    background-color: var(--rdg-background-color);\r\n\r\n    .${checkboxInput}:checked + & {\r\n      background-color: var(--rdg-checkbox-color);\r\n      outline: 4px solid var(--rdg-background-color);\r\n      outline-offset: -6px;\r\n    }\r\n\r\n    .${checkboxInput}:focus + & {\r\n      border-color: var(--rdg-checkbox-focus-color);\r\n    }\r\n  }\r\n`\r\n\r\nconst checkboxClassname = `rdg-checkbox ${checkbox}`\r\n\r\nconst checkboxLabelDisabled = css`\r\n  @layer rdg.CheckboxLabel {\r\n    cursor: default;\r\n\r\n    .${checkbox} {\r\n      border-color: var(--rdg-checkbox-disabled-border-color);\r\n      background-color: var(--rdg-checkbox-disabled-background-color);\r\n    }\r\n  }\r\n`\r\n\r\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`\r\n\r\nexport function checkboxFormatter({ onChange, ...props }, ref) {\r\n  function handleChange(e) {\r\n    onChange(e.target.checked, e.nativeEvent.shiftKey)\r\n  }\r\n\r\n  return (\r\n    <label\r\n      className={clsx(checkboxLabelClassname, {\r\n        [checkboxLabelDisabledClassname]: props.disabled\r\n      })}\r\n    >\r\n      <input\r\n        type=\"checkbox\"\r\n        ref={ref}\r\n        {...props}\r\n        className={checkboxInputClassname}\r\n        onChange={handleChange}\r\n      />\r\n      <div className={checkboxClassname} />\r\n    </label>\r\n  )\r\n}\r\n","import React from 'react';\r\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\r\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from \"react\"\r\n\r\n// Silence silly warning\r\n// https://reactjs.org/link/uselayouteffect-ssr\r\nexport const useLayoutEffect =\r\n  typeof window === \"undefined\" ? useEffect : useOriginalLayoutEffect\r\n","import React from 'react';\r\nimport { useRef } from \"react\"\r\nimport { useLayoutEffect } from \"./useLayoutEffect\"\r\n\r\nexport function useFocusRef(isSelected) {\r\n  const ref = useRef(null)\r\n\r\n  useLayoutEffect(() => {\r\n    if (!isSelected) return\r\n    ref.current?.focus({ preventScroll: true })\r\n  }, [isSelected])\r\n\r\n  return {\r\n    ref,\r\n    tabIndex: isSelected ? 0 : -1\r\n  }\r\n}\r\n","import { createContext, useContext } from \"react\"\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst DataGridDefaultComponentsContext = createContext(undefined)\r\n\r\nexport const DataGridDefaultComponentsProvider =\r\n  DataGridDefaultComponentsContext.Provider\r\n\r\nexport function useDefaultComponents() {\r\n  return useContext(DataGridDefaultComponentsContext)\r\n}\r\n","import React from 'react';\r\nimport { useFocusRef } from \"../hooks/useFocusRef\"\r\nimport { useDefaultComponents } from \"../DataGridDefaultComponentsProvider\"\r\n\r\nexport function SelectCellFormatter({\r\n  value,\r\n  isCellSelected,\r\n  disabled,\r\n  onChange,\r\n  \"aria-label\": ariaLabel,\r\n  \"aria-labelledby\": ariaLabelledBy\r\n}) {\r\n  const { ref, tabIndex } = useFocusRef(isCellSelected)\r\n  const checkboxFormatter = useDefaultComponents().checkboxFormatter\r\n\r\n  return (\r\n    <div>\r\n      {checkboxFormatter(\r\n        {\r\n          \"aria-label\": ariaLabel,\r\n          \"aria-labelledby\": ariaLabelledBy,\r\n          tabIndex,\r\n          disabled,\r\n          checked: value,\r\n          onChange\r\n        },\r\n        ref\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","export function valueFormatter(props) {\r\n  try {\r\n    return <>{props.row[props.column.key]}</>\r\n  } catch {\r\n    return null\r\n  }\r\n}","import React from 'react';\r\nimport { css } from \"@linaria/core\"\r\nimport { useFocusRef } from \"../hooks/useFocusRef\"\r\n\r\nconst groupCellContent = css`\r\n  @layer rdg.GroupCellContent {\r\n    outline: none;\r\n  }\r\n`\r\n\r\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`\r\n\r\nconst caret = css`\r\n  @layer rdg.GroupCellCaret {\r\n    margin-inline-start: 4px;\r\n    stroke: currentColor;\r\n    stroke-width: 1.5px;\r\n    fill: transparent;\r\n    vertical-align: middle;\r\n\r\n    > path {\r\n      transition: d 0.1s;\r\n    }\r\n  }\r\n`\r\n\r\nconst caretClassname = `rdg-caret ${caret}`\r\n\r\nexport function toggleGroupFormatter(props) {\r\n  return <ToggleGroup {...props} />\r\n}\r\n\r\nexport function ToggleGroup({\r\n  groupKey,\r\n  isExpanded,\r\n  isCellSelected,\r\n  toggleGroup\r\n}) {\r\n  const { ref, tabIndex } = useFocusRef(isCellSelected)\r\n\r\n  function handleKeyDown({ key }) {\r\n    if (key === \"Enter\") {\r\n      toggleGroup()\r\n    }\r\n  }\r\n\r\n  const d = isExpanded ? \"M1 1 L 7 7 L 13 1\" : \"M1 7 L 7 1 L 13 7\"\r\n\r\n  return (\r\n    <span\r\n      ref={ref}\r\n      className={groupCellContentClassname}\r\n      tabIndex={tabIndex}\r\n      onKeyDown={handleKeyDown}\r\n    >\r\n      {groupKey}\r\n      <svg\r\n        viewBox=\"0 0 14 8\"\r\n        width=\"14\"\r\n        height=\"8\"\r\n        className={caretClassname}\r\n        aria-hidden\r\n      >\r\n        <path d={d} />\r\n      </svg>\r\n    </span>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport { css } from \"@linaria/core\";\r\nimport { SelectCellFormatter } from \"./formatters\";\r\nimport { useRowSelection } from \"./hooks\";\r\nexport const SERIAL_NUMBER_COLUMN_KEY = \"serial-number\";\r\nexport const SELECT_COLUMN_KEY = \"select-row\";\r\n\r\nconst headerCellClassName = css`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #16365d;\r\n  color: white;\r\n  font-weight: bold;\r\n`;\r\n\r\nfunction SelectFormatter(props) {\r\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\r\n\r\n  return (\r\n    <SelectCellFormatter\r\n      aria-label=\"Select\"\r\n      isCellSelected={props.isCellSelected}\r\n      value={isRowSelected}\r\n      onChange={(checked, isShiftClick) => {\r\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nfunction SelectGroupFormatter(props) {\r\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\r\n\r\n  return (\r\n    <SelectCellFormatter\r\n      aria-label=\"Select Group\"\r\n      isCellSelected={props.isCellSelected}\r\n      value={isRowSelected}\r\n      onChange={(checked) => {\r\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const SelectColumn = {\r\n  key: SELECT_COLUMN_KEY,\r\n  name: \"\",\r\n  width: 35,\r\n  minWidth: 35,\r\n  maxWidth: 35,\r\n  resizable: false,\r\n  sortable: false,\r\n  frozen: true,\r\n  filter: false,\r\n  headerRenderer(props) {\r\n    return (\r\n      <SelectCellFormatter\r\n        aria-label=\"Select All\"\r\n        isCellSelected={props.isCellSelected}\r\n        value={props.allRowsSelected}\r\n        onChange={props.onAllRowsSelectionChange}\r\n      />\r\n    );\r\n  },\r\n  cellRenderer(props) {\r\n    return <SelectFormatter {...props} />;\r\n  },\r\n  groupFormatter(props) {\r\n    return <SelectGroupFormatter {...props} />;\r\n  },\r\n};\r\nexport const SerialNumberColumn = {\r\n  key: SERIAL_NUMBER_COLUMN_KEY,\r\n  name: \"Sr. No.\",\r\n  width: 45,\r\n  resizable: false,\r\n  sortable: false,\r\n  frozen: true,\r\n  filter: false,\r\n  headerRenderer: () => {\r\n    return <div>{SerialNumberColumn.name}</div>;\r\n  },\r\n  cellClass: headerCellClassName,\r\n  cellRenderer: (props) => {\r\n    return <>{props.column.rowIndex + 1} </>;\r\n  },\r\n};\r\n","export function getColSpan(column, lastFrozenColumnIndex, args) {\r\n  const colSpan =\r\n    typeof column.colSpan === \"function\" ? column.colSpan(args) : 1\r\n  if (\r\n    Number.isInteger(colSpan) &&\r\n    colSpan > 1 &&\r\n    // ignore colSpan if it spans over both frozen and regular columns\r\n    (!column.frozen || column.idx + colSpan - 1 <= lastFrozenColumnIndex)\r\n  ) {\r\n    return colSpan\r\n  }\r\n  return undefined\r\n}\r\n","export function stopPropagation(event) {\r\n  event.stopPropagation()\r\n}\r\n\r\nexport function scrollIntoView(element) {\r\n  element?.scrollIntoView({ inline: \"nearest\", block: \"nearest\" })\r\n}\r\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\nconst nonInputKeys = new Set([\r\n  // Special keys\r\n  \"Unidentified\",\r\n  // Modifier keys\r\n  \"Alt\",\r\n  \"AltGraph\",\r\n  \"CapsLock\",\r\n  \"Control\",\r\n  \"Fn\",\r\n  \"FnLock\",\r\n  \"Meta\",\r\n  \"NumLock\",\r\n  \"ScrollLock\",\r\n  \"Shift\",\r\n  // Whitespace keys\r\n  \"Tab\",\r\n  // Navigation keys\r\n  \"ArrowDown\",\r\n  \"ArrowLeft\",\r\n  \"ArrowRight\",\r\n  \"ArrowUp\",\r\n  \"End\",\r\n  \"Home\",\r\n  \"PageDown\",\r\n  \"PageUp\",\r\n  // Editing\r\n  \"Insert\",\r\n  // UI keys\r\n  \"ContextMenu\",\r\n  \"Escape\",\r\n  \"Pause\",\r\n  \"Play\",\r\n  // Device keys\r\n  \"PrintScreen\",\r\n  // Function keys\r\n  \"F1\",\r\n  // 'F2', /!\\ specifically allowed, do not edit\r\n  \"F3\",\r\n  \"F4\",\r\n  \"F5\",\r\n  \"F6\",\r\n  \"F7\",\r\n  \"F8\",\r\n  \"F9\",\r\n  \"F10\",\r\n  \"F11\",\r\n  \"F12\"\r\n])\r\n\r\nexport function isCtrlKeyHeldDown(e) {\r\n  return (e.ctrlKey || e.metaKey) && e.key !== \"Control\"\r\n}\r\n\r\nexport function isDefaultCellInput(event) {\r\n  return !nonInputKeys.has(event.key)\r\n}\r\n\r\n/**\r\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\r\n * - Tab:\r\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\r\n *   - The editor element must be the only immediate child of the editor container/a label.\r\n */\r\nexport function onEditorNavigation({ key, target }) {\r\n  if (\r\n    key === \"Tab\" &&\r\n    (target instanceof HTMLInputElement ||\r\n      target instanceof HTMLTextAreaElement ||\r\n      target instanceof HTMLSelectElement)\r\n  ) {\r\n    return target.matches(\r\n      \".rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child, .rdg-editor-container > div:only-child > label:only-child > :only-child\"\r\n    )\r\n  }\r\n  return false\r\n}\r\n","import React from 'react';\r\nimport { css } from \"@linaria/core\"\r\n\r\nconst measuringCellClassname = css`\r\n  @layer rdg.MeasuringCell {\r\n    contain: strict;\r\n    grid-row: 1;\r\n    visibility: hidden;\r\n  }\r\n`\r\n\r\nexport function renderMeasuringCells(viewportColumns) {\r\n  return (\r\n    <>\r\n      {viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\r\n        <div\r\n          key={key}\r\n          className={measuringCellClassname}\r\n          style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\r\n          data-measuring-cell-key={key}\r\n        />\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { getColSpan } from \"./colSpanUtils\"\r\n\r\nexport function isSelectedCellEditable({\r\n  selectedPosition,\r\n  columns,\r\n  rows,\r\n  isGroupRow\r\n}) {\r\n  const column = columns[selectedPosition.idx]\r\n  const row = rows[selectedPosition.rowIdx]\r\n  return !isGroupRow(row) && isCellEditable(column, row)\r\n}\r\n\r\nexport function isCellEditable(column, row) {\r\n  return (\r\n    column.cellEditor != null &&\r\n    !column.rowGroup &&\r\n    (typeof column.editable === \"function\"\r\n      ? column.editable(row)\r\n      : column.editable) !== false\r\n  )\r\n}\r\n\r\nexport function getSelectedCellColSpan({\r\n  rows,\r\n  topSummaryRows,\r\n  bottomSummaryRows,\r\n  rowIdx,\r\n  lastFrozenColumnIndex,\r\n  column,\r\n  isGroupRow\r\n}) {\r\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0\r\n  const minRowIdx = -1 - topSummaryRowsCount\r\n  if (rowIdx === minRowIdx) {\r\n    return getColSpan(column, lastFrozenColumnIndex, { type: \"HEADER\" })\r\n  }\r\n\r\n  if (\r\n    topSummaryRows &&\r\n    rowIdx > minRowIdx &&\r\n    rowIdx <= topSummaryRowsCount + minRowIdx\r\n  ) {\r\n    return getColSpan(column, lastFrozenColumnIndex, {\r\n      type: \"SUMMARY\",\r\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\r\n    })\r\n  }\r\n\r\n  if (rowIdx >= 0 && rowIdx < rows.length) {\r\n    const row = rows[rowIdx]\r\n    if (!isGroupRow(row)) {\r\n      return getColSpan(column, lastFrozenColumnIndex, { type: \"ROW\", row })\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  if (bottomSummaryRows) {\r\n    return getColSpan(column, lastFrozenColumnIndex, {\r\n      type: \"SUMMARY\",\r\n      row: bottomSummaryRows[rowIdx - rows.length]\r\n    })\r\n  }\r\n\r\n  return undefined\r\n}\r\n\r\nexport function getNextSelectedCellPosition({\r\n  cellNavigationMode,\r\n  columns,\r\n  colSpanColumns,\r\n  rows,\r\n  topSummaryRows,\r\n  bottomSummaryRows,\r\n  minRowIdx,\r\n  maxRowIdx,\r\n  currentPosition: { idx: currentIdx },\r\n  nextPosition,\r\n  lastFrozenColumnIndex,\r\n  isCellWithinBounds,\r\n  isGroupRow\r\n}) {\r\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition\r\n\r\n  const setColSpan = moveRight => {\r\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\r\n      const row = rows[nextRowIdx]\r\n      if (isGroupRow(row)) return\r\n    }\r\n    // If a cell within the colspan range is selected then move to the\r\n    // previous or the next cell depending on the navigation direction\r\n    for (const column of colSpanColumns) {\r\n      const colIdx = column.idx\r\n      if (colIdx > nextIdx) break\r\n      const colSpan = getSelectedCellColSpan({\r\n        rows,\r\n        topSummaryRows,\r\n        bottomSummaryRows,\r\n        rowIdx: nextRowIdx,\r\n        lastFrozenColumnIndex,\r\n        column,\r\n        isGroupRow\r\n      })\r\n\r\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\r\n        nextIdx = colIdx + (moveRight ? colSpan : 0)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  if (isCellWithinBounds(nextPosition)) {\r\n    setColSpan(nextIdx - currentIdx > 0)\r\n  }\r\n\r\n  if (cellNavigationMode !== \"NONE\") {\r\n    const columnsCount = columns.length\r\n    const isAfterLastColumn = nextIdx === columnsCount\r\n    const isBeforeFirstColumn = nextIdx === -1\r\n\r\n    if (isAfterLastColumn) {\r\n      if (cellNavigationMode === \"CHANGE_ROW\") {\r\n        const isLastRow = nextRowIdx === maxRowIdx\r\n        if (!isLastRow) {\r\n          nextIdx = 0\r\n          nextRowIdx += 1\r\n        }\r\n      } else {\r\n        nextIdx = 0\r\n      }\r\n    } else if (isBeforeFirstColumn) {\r\n      if (cellNavigationMode === \"CHANGE_ROW\") {\r\n        const isFirstRow = nextRowIdx === minRowIdx\r\n        if (!isFirstRow) {\r\n          nextRowIdx -= 1\r\n          nextIdx = columnsCount - 1\r\n        }\r\n      } else {\r\n        nextIdx = columnsCount - 1\r\n      }\r\n      setColSpan(false)\r\n    }\r\n  }\r\n\r\n  return { idx: nextIdx, rowIdx: nextRowIdx }\r\n}\r\n\r\nexport function canExitGrid({\r\n  cellNavigationMode,\r\n  maxColIdx,\r\n  minRowIdx,\r\n  maxRowIdx,\r\n  selectedPosition: { rowIdx, idx },\r\n  shiftKey\r\n}) {\r\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\r\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\r\n  if (cellNavigationMode === \"NONE\" || cellNavigationMode === \"CHANGE_ROW\") {\r\n    const atLastCellInRow = idx === maxColIdx\r\n    const atFirstCellInRow = idx === 0\r\n    const atLastRow = rowIdx === maxRowIdx\r\n    const atFirstRow = rowIdx === minRowIdx\r\n\r\n    return shiftKey\r\n      ? atFirstCellInRow && atFirstRow\r\n      : atLastCellInRow && atLastRow\r\n  }\r\n\r\n  return false\r\n}\r\n","import React from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport {\r\n  cellClassname,\r\n  cellFrozenClassname,\r\n  cellFrozenLastClassname,\r\n} from \"../style\";\r\n\r\nexport function getRowStyle(rowIdx, height) {\r\n  if (height !== undefined) {\r\n    return {\r\n      \"--rdg-grid-row-start\": rowIdx,\r\n      \"--rdg-row-height\": `${height}px`,\r\n    };\r\n  }\r\n  return {\r\n    \"--rdg-grid-row-start\": rowIdx,\r\n  };\r\n}\r\nexport function getCellStyle(column, colSpan, rowSpan) {\r\n  return {\r\n    gridColumnStart: column.idx + 1,\r\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\r\n    gridRowEnd: rowSpan !== undefined ? `span ${rowSpan}` : undefined,\r\n    insetInlineStart: column.frozen\r\n      ? `var(--rdg-frozen-left-${column.idx})`\r\n      : undefined,\r\n  };\r\n}\r\n\r\nexport function getCellClassname(column, ...extraClasses) {\r\n  return clsx(\r\n    cellClassname,\r\n    {\r\n      [cellFrozenClassname]: column.frozen,\r\n      [cellFrozenLastClassname]: column.isLastFrozenColumn,\r\n    },\r\n    ...extraClasses\r\n  );\r\n}\r\n","export * from \"./colSpanUtils\"\r\nexport * from \"./domUtils\"\r\nexport * from \"./keyboardUtils\"\r\nexport * from \"./renderMeasuringCells\"\r\nexport * from \"./selectedCellUtils\"\r\nexport * from \"./styleUtils\"\r\n\r\nexport const { min, max, round, floor, sign, abs } = Math\r\n\r\nexport function assertIsValidKeyGetter(keyGetter) {\r\n  if (typeof keyGetter !== \"function\") {\r\n    throw new Error(\"Please specify the rowKeyGetter prop to use selection\")\r\n  }\r\n}\r\n\r\nexport function clampColumnWidth(width, { minWidth, maxWidth }) {\r\n  width = max(width, minWidth)\r\n\r\n  // ignore maxWidth if it less than minWidth\r\n  if (typeof maxWidth === \"number\" && maxWidth >= minWidth) {\r\n    return min(width, maxWidth)\r\n  }\r\n\r\n  return width\r\n}\r\n","import React from \"react\";\r\nimport { css } from \"@linaria/core\";\r\n// import { Input } from \"lai_webui\";\r\n\r\nconst textEditorInternalClassname = css`\r\n  @layer rdg.TextEditor {\r\n    appearance: none;\r\n    box-sizing: border-box;\r\n    inline-size: 100%;\r\n    block-size: 100%;\r\n    padding-block: 0;\r\n    padding-inline: 6px;\r\n    border: 2px solid #ccc;\r\n    vertical-align: top;\r\n    color: var(--rdg-color);\r\n    background-color: var(--rdg-background-color);\r\n    font-family: inherit;\r\n    font-size: var(--rdg-font-size);\r\n\r\n    &:focus {\r\n      border-color: var(--rdg-selection-color);\r\n      outline: none;\r\n    }\r\n\r\n    &::placeholder {\r\n      color: #999;\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\r\n\r\n\r\nexport default function textEditor({\r\n  row,\r\n  column,\r\n  onRowChange,\r\n  onClose,\r\n  ...props\r\n}) {\r\n  var type = column.type ? column.type : \"text\";\r\n  type =\r\n    type.toLowerCase() === \"masked\" || type.toLowerCase() === \"mask\"\r\n      ? \"password\"\r\n      : type;\r\n\r\n  return (\r\n    <input\r\n      spellCheck=\"true\"\r\n      className={textEditorClassname}\r\n      type={type}\r\n      disabled={column.editable ? column.editable : false}\r\n      value={row[column.key]}\r\n      {...column.inputProps}\r\n      onChange={(event) =>\r\n        onRowChange({ ...row, [column.key]: event.target.value })\r\n      }\r\n      // onBlur={() => onClose(true)}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport { valueFormatter, toggleGroupFormatter } from \"../formatters\";\r\nimport { SELECT_COLUMN_KEY } from \"../Columns\";\r\nimport { clampColumnWidth, max, min } from \"../utils\";\r\nimport { textEditorClassname } from \"../editors/textEditor\";\r\nconst DEFAULT_COLUMN_WIDTH = \"auto\";\r\nconst DEFAULT_COLUMN_MIN_WIDTH = 40;\r\n\r\nexport function useCalculatedColumns({\r\n  rawColumns,\r\n  columnWidths,\r\n  viewportWidth,\r\n  scrollLeft,\r\n  defaultColumnOptions,\r\n  rawGroupBy,\r\n  enableVirtualization,\r\n  frameworkComponents,\r\n}) {\r\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\r\n  const defaultMinWidth =\r\n    defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\r\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\r\n  const defaultFormatter = defaultColumnOptions?.formatter ?? valueFormatter;\r\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\r\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\r\n  const defaultFilter = defaultColumnOptions?.dilter ?? false;\r\n\r\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } =\r\n    useMemo(() => {\r\n      // Filter rawGroupBy and ignore keys that do not match the columns prop\r\n      const groupBy = [];\r\n      let lastFrozenColumnIndex = -1;\r\n\r\n      const columns = rawColumns?.map((rawColumn) => {\r\n        const rowGroup = rawGroupBy?.includes(rawColumn.field) ?? false;\r\n        const frozen = rowGroup || rawColumn.frozen;\r\n\r\n        const cellRendererValue = rawColumn.cellRenderer;\r\n        const components = frameworkComponents\r\n          ? Object.keys(frameworkComponents)\r\n          : null;\r\n\r\n        const indexOfComponent = components?.indexOf(cellRendererValue);\r\n        const customComponentName =\r\n          indexOfComponent > -1 ? components[indexOfComponent] : null;\r\n\r\n        const column = {\r\n          ...rawColumn,\r\n          colId: rawColumn.field,\r\n          key: rawColumn.field,\r\n          userProvidedColDef: rawColumn,\r\n          idx: 0,\r\n          frozen,\r\n          isLastFrozenColumn: false,\r\n          rowGroup,\r\n          width: rawColumn.width ?? defaultWidth,\r\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\r\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\r\n          sortable: rawColumn.sortable ?? defaultSortable,\r\n          resizable: rawColumn.resizable ?? defaultResizable,\r\n          formatter: rawColumn.cellRenderer\r\n            ? rawColumn.cellRenderer\r\n            : rawColumn.valueFormatter ?? defaultFormatter,\r\n\r\n          cellRenderer:\r\n            frameworkComponents?.[customComponentName] ??\r\n            rawColumn.cellRenderer ??\r\n            rawColumn.valueFormatter ??\r\n            defaultFormatter,\r\n\r\n          filter: rawColumn.filter ?? defaultFilter,\r\n        };\r\n\r\n        if (rowGroup) {\r\n          column.groupFormatter ??= toggleGroupFormatter;\r\n        }\r\n        if (rawColumn.editable) {\r\n          column.cellEditor = column.cellEditor\r\n            ? column.cellEditor\r\n            : (props) => {\r\n                return (\r\n                  <input\r\n                    className={textEditorClassname}\r\n                    value={props.row[props.column.key]}\r\n                    onChange={(event) =>\r\n                      props.onRowChange({\r\n                        ...props.row,\r\n                        [props.column.key]: event.target.value,\r\n                      })\r\n                    }\r\n                  />\r\n                );\r\n              };\r\n        }\r\n        if (frozen) {\r\n          lastFrozenColumnIndex++;\r\n        }\r\n\r\n        return column;\r\n      });\r\n\r\n      columns?.sort(\r\n        ({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\r\n          // Sort select column first:\r\n          if (aKey === SELECT_COLUMN_KEY) return -1;\r\n          if (bKey === SELECT_COLUMN_KEY) return 1;\r\n\r\n          // Sort grouped columns second, following the groupBy order:\r\n          if (rawGroupBy?.includes(aKey)) {\r\n            if (rawGroupBy.includes(bKey)) {\r\n              return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\r\n            }\r\n            return -1;\r\n          }\r\n          if (rawGroupBy?.includes(bKey)) return 1;\r\n\r\n          // Sort frozen columns third:\r\n          if (frozenA) {\r\n            if (frozenB) return 0;\r\n            return -1;\r\n          }\r\n          if (frozenB) return 1;\r\n\r\n          // Sort other columns last:\r\n          return 0;\r\n        }\r\n      );\r\n\r\n      const colSpanColumns = [];\r\n      columns?.forEach((column, idx) => {\r\n        column.idx = idx;\r\n\r\n        if (column.rowGroup) {\r\n          groupBy.push(column.key);\r\n        }\r\n\r\n        if (column.colSpan != null) {\r\n          colSpanColumns.push(column);\r\n        }\r\n      });\r\n\r\n      if (lastFrozenColumnIndex !== -1) {\r\n        columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\r\n      }\r\n\r\n      return {\r\n        columns,\r\n        colSpanColumns,\r\n        lastFrozenColumnIndex,\r\n        groupBy,\r\n      };\r\n    }, [\r\n      rawColumns,\r\n      defaultWidth,\r\n      defaultMinWidth,\r\n      defaultMaxWidth,\r\n      defaultFormatter,\r\n      defaultResizable,\r\n      defaultSortable,\r\n      rawGroupBy,\r\n    ]);\r\n\r\n  const {\r\n    templateColumns,\r\n    layoutCssVars,\r\n    totalFrozenColumnWidth,\r\n    columnMetrics,\r\n  } = useMemo(() => {\r\n    const templateColumns = [];\r\n    let left = 0;\r\n    let totalFrozenColumnWidth = 0;\r\n    const columnMetrics = new Map();\r\n\r\n    for (const column of columns) {\r\n      let width = columnWidths.get(column.key) ?? column.width;\r\n      if (typeof width === \"number\") {\r\n        width = clampColumnWidth(width, column);\r\n      } else {\r\n        // This is a placeholder width so we can continue to use virtualization.\r\n        // The actual value is set after the column is rendered\r\n        width = column.minWidth;\r\n      }\r\n      templateColumns.push(`${width}px`);\r\n      columnMetrics.set(column, { width, left });\r\n      left += width;\r\n    }\r\n\r\n    if (lastFrozenColumnIndex !== -1) {\r\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex]);\r\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\r\n    }\r\n\r\n    const layoutCssVars = {\r\n      gridTemplateColumns: templateColumns.join(\" \"),\r\n    };\r\n\r\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\r\n      const column = columns[i];\r\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${\r\n        columnMetrics.get(column).left\r\n      }px`;\r\n    }\r\n\r\n    return {\r\n      templateColumns,\r\n      layoutCssVars,\r\n      totalFrozenColumnWidth,\r\n      columnMetrics,\r\n    };\r\n  }, [columnWidths, columns, lastFrozenColumnIndex]);\r\n\r\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo(() => {\r\n    if (!enableVirtualization) {\r\n      return [0, columns.length - 1];\r\n    }\r\n    // get the viewport's left side and right side positions for non-frozen columns\r\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\r\n    const viewportRight = scrollLeft + viewportWidth;\r\n    // get first and last non-frozen column indexes\r\n    const lastColIdx = columns.length - 1;\r\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\r\n\r\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\r\n    if (viewportLeft >= viewportRight) {\r\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\r\n    }\r\n\r\n    // get the first visible non-frozen column index\r\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\r\n    while (colVisibleStartIdx < lastColIdx) {\r\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx]);\r\n      // if the right side of the columnn is beyond the left side of the available viewport,\r\n      // then it is the first column that's at least partially visible\r\n      if (left + width > viewportLeft) {\r\n        break;\r\n      }\r\n      colVisibleStartIdx++;\r\n    }\r\n\r\n    // get the last visible non-frozen column index\r\n    let colVisibleEndIdx = colVisibleStartIdx;\r\n    while (colVisibleEndIdx < lastColIdx) {\r\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx]);\r\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\r\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\r\n      if (left + width >= viewportRight) {\r\n        break;\r\n      }\r\n      colVisibleEndIdx++;\r\n    }\r\n\r\n    const colOverscanStartIdx = max(\r\n      firstUnfrozenColumnIdx,\r\n      colVisibleStartIdx - 1\r\n    );\r\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\r\n\r\n    return [colOverscanStartIdx, colOverscanEndIdx];\r\n  }, [\r\n    columnMetrics,\r\n    columns,\r\n    lastFrozenColumnIndex,\r\n    scrollLeft,\r\n    totalFrozenColumnWidth,\r\n    viewportWidth,\r\n    enableVirtualization,\r\n  ]);\r\n\r\n  return {\r\n    columns,\r\n    colSpanColumns,\r\n    colOverscanStartIdx,\r\n    colOverscanEndIdx,\r\n    templateColumns,\r\n    layoutCssVars,\r\n    columnMetrics,\r\n    lastFrozenColumnIndex,\r\n    totalFrozenColumnWidth,\r\n    groupBy,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { useRef, useState } from \"react\"\r\nimport { useLayoutEffect } from \"./useLayoutEffect\"\r\n\r\nexport function useGridDimensions() {\r\n  const gridRef = useRef(null)\r\n  const [inlineSize, setInlineSize] = useState(1)\r\n  const [blockSize, setBlockSize] = useState(1)\r\n  const [isWidthInitialized, setWidthInitialized] = useState(false)\r\n\r\n  useLayoutEffect(() => {\r\n    const { ResizeObserver } = window\r\n\r\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\r\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n    if (ResizeObserver == null) return\r\n\r\n    const {\r\n      clientWidth,\r\n      clientHeight,\r\n      offsetWidth,\r\n      offsetHeight\r\n    } = gridRef.current\r\n    const { width, height } = gridRef.current.getBoundingClientRect()\r\n    const initialWidth = width - offsetWidth + clientWidth\r\n    const initialHeight = height - offsetHeight + clientHeight\r\n\r\n    setInlineSize(initialWidth)\r\n    setBlockSize(initialHeight)\r\n    setWidthInitialized(true)\r\n\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      const size = entries[0].contentBoxSize[0]\r\n      setInlineSize(size.inlineSize)\r\n      setBlockSize(size.blockSize)\r\n    })\r\n    resizeObserver.observe(gridRef.current)\r\n\r\n    return () => {\r\n      resizeObserver.disconnect()\r\n    }\r\n  }, [])\r\n\r\n  return [gridRef, inlineSize, blockSize, isWidthInitialized]\r\n}\r\n","import React from 'react';\r\nimport { useRef, useEffect, useCallback } from \"react\"\r\n\r\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport function useLatestFunc(fn) {\r\n  const ref = useRef(fn)\r\n\r\n  useEffect(() => {\r\n    ref.current = fn\r\n  })\r\n\r\n  const callbackFn = useCallback((...args) => {\r\n    ref.current(...args)\r\n  }, [])\r\n\r\n  // @ts-expect-error\r\n  return fn ? callbackFn : fn\r\n}\r\n","import React from 'react';\r\nimport { useCallback, useState } from \"react\"\r\nimport { scrollIntoView } from \"../utils\"\r\n\r\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\r\nexport function useRovingCellRef(isSelected) {\r\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\r\n  const [isChildFocused, setIsChildFocused] = useState(false)\r\n\r\n  if (isChildFocused && !isSelected) {\r\n    setIsChildFocused(false)\r\n  }\r\n\r\n  const ref = useCallback(cell => {\r\n    if (cell === null) return\r\n    scrollIntoView(cell)\r\n    if (cell.contains(document.activeElement)) return\r\n    cell.focus({ preventScroll: true })\r\n  }, [])\r\n\r\n  function onFocus(event) {\r\n    if (event.target !== event.currentTarget) {\r\n      setIsChildFocused(true)\r\n    }\r\n  }\r\n\r\n  const isFocused = isSelected && !isChildFocused\r\n\r\n  return {\r\n    ref: isSelected ? ref : undefined,\r\n    tabIndex: isFocused ? 0 : -1,\r\n    onFocus: isSelected ? onFocus : undefined\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { createContext, useContext } from \"react\"\r\n\r\nconst RowSelectionContext = createContext(undefined)\r\n\r\nexport const RowSelectionProvider = RowSelectionContext.Provider\r\n\r\nconst RowSelectionChangeContext = createContext(undefined) // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n\r\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider\r\n\r\nexport function useRowSelection() {\r\n  const rowSelectionContext = useContext(RowSelectionContext)\r\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext)\r\n\r\n  if (\r\n    rowSelectionContext === undefined ||\r\n    rowSelectionChangeContext === undefined\r\n  ) {\r\n    throw new Error(\"useRowSelection must be used within DataGrid cells\")\r\n  }\r\n\r\n  return [rowSelectionContext, rowSelectionChangeContext]\r\n}\r\n","import React from \"react\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport { getColSpan } from \"../utils\";\r\n\r\nexport function useViewportColumns({\r\n  columns,\r\n  colSpanColumns,\r\n  rows,\r\n  topSummaryRows,\r\n  bottomSummaryRows,\r\n  colOverscanStartIdx,\r\n  colOverscanEndIdx,\r\n  lastFrozenColumnIndex,\r\n  rowOverscanStartIdx,\r\n  rowOverscanEndIdx,\r\n  columnWidths,\r\n  isGroupRow,\r\n}) {\r\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\r\n  const startIdx = useMemo(() => {\r\n    if (colOverscanStartIdx === 0) return 0;\r\n\r\n    let startIdx = colOverscanStartIdx;\r\n\r\n    const updateStartIdx = (colIdx, colSpan) => {\r\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\r\n        startIdx = colIdx;\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    for (const column of colSpanColumns) {\r\n      // check header row\r\n      const colIdx = column.idx;\r\n      if (colIdx >= startIdx) break;\r\n      if (\r\n        updateStartIdx(\r\n          colIdx,\r\n          getColSpan(column, lastFrozenColumnIndex, { type: \"HEADER\" })\r\n        )\r\n      ) {\r\n        break;\r\n      }\r\n\r\n      // check viewport rows\r\n      for (\r\n        let rowIdx = rowOverscanStartIdx;\r\n        rowIdx <= rowOverscanEndIdx;\r\n        rowIdx++\r\n      ) {\r\n        const row = rows[rowIdx];\r\n        if (isGroupRow(row)) continue;\r\n        if (\r\n          updateStartIdx(\r\n            colIdx,\r\n            getColSpan(column, lastFrozenColumnIndex, { type: \"ROW\", row })\r\n          )\r\n        ) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // check summary rows\r\n      if (topSummaryRows != null) {\r\n        for (const row of topSummaryRows) {\r\n          if (\r\n            updateStartIdx(\r\n              colIdx,\r\n              getColSpan(column, lastFrozenColumnIndex, {\r\n                type: \"SUMMARY\",\r\n                row,\r\n              })\r\n            )\r\n          ) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (bottomSummaryRows != null) {\r\n        for (const row of bottomSummaryRows) {\r\n          if (\r\n            updateStartIdx(\r\n              colIdx,\r\n              getColSpan(column, lastFrozenColumnIndex, {\r\n                type: \"SUMMARY\",\r\n                row,\r\n              })\r\n            )\r\n          ) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return startIdx;\r\n  }, [\r\n    rowOverscanStartIdx,\r\n    rowOverscanEndIdx,\r\n    rows,\r\n    topSummaryRows,\r\n    bottomSummaryRows,\r\n    colOverscanStartIdx,\r\n    lastFrozenColumnIndex,\r\n    colSpanColumns,\r\n    isGroupRow,\r\n  ]);\r\n\r\n  const { viewportColumns, flexWidthViewportColumns } = useMemo(() => {\r\n    const viewportColumns = [];\r\n    const flexWidthViewportColumns = [];\r\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\r\n      const column = columns[colIdx];\r\n\r\n      if (colIdx < startIdx && !column.frozen) continue;\r\n      viewportColumns.push(column);\r\n      if (typeof column.width === \"string\") {\r\n        flexWidthViewportColumns.push(column);\r\n      }\r\n    }\r\n\r\n    return { viewportColumns, flexWidthViewportColumns };\r\n  }, [startIdx, colOverscanEndIdx, columns]);\r\n\r\n  const unsizedFlexWidthViewportColumns = useMemo(() => {\r\n    return flexWidthViewportColumns.filter(\r\n      (column) => !columnWidths.has(column.key)\r\n    );\r\n  }, [flexWidthViewportColumns, columnWidths]);\r\n\r\n  return {\r\n    viewportColumns,\r\n    flexWidthViewportColumns: unsizedFlexWidthViewportColumns,\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { useMemo } from \"react\";\r\nimport { floor, max, min } from \"../utils\";\r\n\r\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\r\nfunction isReadonlyArray(arr) {\r\n  return Array.isArray(arr);\r\n}\r\n\r\nexport function useViewportRows({\r\n  rawRows,\r\n  rowHeight,\r\n  clientHeight,\r\n  scrollTop,\r\n  groupBy,\r\n  rowGrouper,\r\n  expandedGroupIds,\r\n  enableVirtualization,\r\n  paginationPageSize,\r\n  current,\r\n  pagination,\r\n  expandAll,\r\n}) {\r\n  const [groupedRows, rowsCount] = useMemo(() => {\r\n    if (groupBy.length === 0 || rowGrouper == null)\r\n      return [undefined, rawRows.length];\r\n\r\n    const groupRows = (\r\n      rows,\r\n      [groupByKey, ...remainingGroupByKeys],\r\n      startRowIndex\r\n    ) => {\r\n      let groupRowsCount = 0;\r\n      const groups = {};\r\n      for (const [key, childRows] of Object.entries(\r\n        rowGrouper(rows, groupByKey)\r\n      )) {\r\n        // Recursively group each parent group\r\n        const [childGroups, childRowsCount] =\r\n          remainingGroupByKeys.length === 0\r\n            ? [childRows, childRows.length]\r\n            : groupRows(\r\n                childRows,\r\n                remainingGroupByKeys,\r\n                startRowIndex + groupRowsCount + 1\r\n              ); // 1 for parent row\r\n        groups[key] = {\r\n          childRows,\r\n          childGroups,\r\n          startRowIndex: startRowIndex + groupRowsCount,\r\n        };\r\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\r\n      }\r\n\r\n      return [groups, groupRowsCount];\r\n    };\r\n\r\n    return groupRows(rawRows, groupBy, 0);\r\n  }, [groupBy, rowGrouper, rawRows]);\r\n\r\n  const [rows, isGroupRow] = useMemo(() => {\r\n    const allGroupRows = new Set();\r\n    if (!groupedRows) return [rawRows, isGroupRow];\r\n\r\n    const flattenedRows = [];\r\n    const expandGroup = (rows, parentId, level) => {\r\n      if (isReadonlyArray(rows)) {\r\n        flattenedRows.push(...rows);\r\n        return;\r\n      }\r\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\r\n        // TODO: should users have control over the generated key?\r\n        const id =\r\n          parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\r\n        const isExpanded = expandAll!= null ? expandAll : expandedGroupIds?.has(id) ?? false;\r\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\r\n\r\n        const groupRow = {\r\n          id,\r\n          parentId,\r\n          groupKey,\r\n          isExpanded,\r\n          childRows,\r\n          level,\r\n          posInSet,\r\n          startRowIndex,\r\n          setSize: keys.length,\r\n        };\r\n        flattenedRows.push(groupRow);\r\n        allGroupRows.add(groupRow);\r\n        if (isExpanded) {\r\n          expandGroup(childGroups, id, level + 1);\r\n        }\r\n      });\r\n    };\r\n\r\n    expandGroup(groupedRows, undefined, 0);\r\n    return [flattenedRows, isGroupRow];\r\n\r\n    function isGroupRow(row) {\r\n      return allGroupRows.has(row);\r\n    }\r\n  }, [expandedGroupIds, groupedRows, rawRows, expandAll]);\r\n\r\n  const {\r\n    totalRowHeight,\r\n    gridTemplateRows,\r\n    getRowTop,\r\n    getRowHeight,\r\n    findRowIdx,\r\n  } = useMemo(() => {\r\n    if (typeof rowHeight === \"number\") {\r\n      return {\r\n        totalRowHeight: rowHeight * rows.length,\r\n        gridTemplateRows: pagination\r\n          ? ` repeat(${paginationPageSize}, ${rowHeight}px)`\r\n          : ` repeat(${rows.length}, ${rowHeight}px)`,\r\n        getRowTop: (rowIdx) => rowIdx * rowHeight,\r\n        getRowHeight: () => rowHeight,\r\n        findRowIdx: (offset) => floor(offset / rowHeight),\r\n      };\r\n    }\r\n\r\n    let totalRowHeight = 0;\r\n    let gridTemplateRows = \" \";\r\n    // Calcule the height of all the rows upfront. This can cause performance issues\r\n    // and we can consider using a similar approach as react-window\r\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\r\n    const rowPositions = rows.map((row) => {\r\n      const currentRowHeight = isGroupRow(row)\r\n        ? rowHeight({ type: \"GROUP\", row })\r\n        : rowHeight({ type: \"ROW\", row });\r\n      const position = { top: totalRowHeight, height: currentRowHeight };\r\n      gridTemplateRows += `${currentRowHeight}px `;\r\n      totalRowHeight += currentRowHeight;\r\n      return position;\r\n    });\r\n\r\n    const validateRowIdx = (rowIdx) => {\r\n      return max(0, min(rows.length - 1, rowIdx));\r\n    };\r\n\r\n    return {\r\n      totalRowHeight,\r\n      gridTemplateRows,\r\n      getRowTop: (rowIdx) => rowPositions[validateRowIdx(rowIdx)].top,\r\n      getRowHeight: (rowIdx) => rowPositions[validateRowIdx(rowIdx)].height,\r\n      findRowIdx(offset) {\r\n        let start = 0;\r\n        let end = rowPositions.length - 1;\r\n\r\n        while (start <= end) {\r\n          const middle = start + floor((end - start) / 2);\r\n          const currentOffset = rowPositions[middle].top;\r\n\r\n          if (currentOffset === offset) return middle;\r\n\r\n          if (currentOffset < offset) {\r\n            start = middle + 1;\r\n          } else if (currentOffset > offset) {\r\n            end = middle - 1;\r\n          }\r\n\r\n          if (start > end) return end;\r\n        }\r\n        return 0;\r\n      },\r\n    };\r\n  }, [isGroupRow, rowHeight, rows]);\r\n\r\n  let rowOverscanStartIdx = 0;\r\n  let rowOverscanEndIdx = rows.length - 1;\r\n\r\n  if (enableVirtualization) {\r\n    const overscanThreshold = 4;\r\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\r\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\r\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\r\n    let numberOfRows =\r\n      rows.length - (current - 1) * paginationPageSize >= paginationPageSize\r\n        ? paginationPageSize - 1\r\n        : rows.length - (current - 1) * paginationPageSize - 1;\r\n    rowOverscanEndIdx = min(\r\n      pagination ? numberOfRows : rows.length - 1,\r\n      rowVisibleEndIdx + overscanThreshold\r\n    );\r\n  }\r\n\r\n  if (pagination) {\r\n    let start = paginationPageSize * current - paginationPageSize;\r\n    let end = paginationPageSize * current;\r\n    return {\r\n      rowOverscanStartIdx,\r\n      rowOverscanEndIdx,\r\n      rows: rows.slice(start, end),\r\n      rowsCount: rows.slice(start, end).length - 1,\r\n      totalRowHeight,\r\n      gridTemplateRows,\r\n      isGroupRow,\r\n      getRowTop,\r\n      getRowHeight,\r\n      findRowIdx,\r\n    };\r\n  } else {\r\n    return {\r\n      rowOverscanStartIdx,\r\n      rowOverscanEndIdx,\r\n      rows,\r\n      rowsCount,\r\n      totalRowHeight,\r\n      gridTemplateRows,\r\n      isGroupRow,\r\n      getRowTop,\r\n      getRowHeight,\r\n      findRowIdx,\r\n    };\r\n  }\r\n}\r\n","import React, {createContext} from \"react\";\r\n\r\nconst FilterContext = createContext(undefined);\r\nexport default FilterContext","import React, { useContext, useEffect, useState } from 'react';\r\nimport { css } from \"@linaria/core\"\r\n\r\nimport { useFocusRef } from \"./hooks\"\r\nimport { useDefaultComponents } from \"./DataGridDefaultComponentsProvider\"\r\nimport FilterContext from './filterContext';\r\nimport FiltersDropdown from './FiltersDropdown'\r\n\r\nconst headerSortCell = css`\r\n  @layer rdg.SortableHeaderCell {\r\n    cursor: pointer;\r\n    display: flex;\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n`\r\n\r\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`\r\n\r\nconst headerSortName = css`\r\n  @layer rdg.SortableHeaderCellName {\r\n    flex-grow: 1;\r\n    overflow: hidden;\r\n    overflow: clip;\r\n    text-overflow: ellipsis;\r\n  }\r\n`\r\n\r\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`\r\n\r\nconst filterClassname = css`\r\nmargin-top: -35px;\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  padding: 4px;\r\n  font-size: 14px;\r\n  inline-size: 100%;\r\n`;\r\n\r\nexport default function HeaderRenderer({\r\n  column,\r\n  rows,\r\n  sortDirection,\r\n  priority,\r\n  onSort,\r\n  isCellSelected,\r\n  setFilters,...rest\r\n}) {\r\n  // const unique = [...new Set(rows?.map(item => item?.[column.field]))]\r\n  // const [options, setOptions] = useState([])\r\n  // useEffect(() => {\r\n  //   let dummy = []\r\n  //   unique.forEach(x => {\r\n  //     dummy.push({\r\n  //       key: column.field,\r\n  //       listname: x,\r\n  //       value: x\r\n  //     })\r\n  //   })\r\n  //   setOptions(dummy)\r\n  // }, [column])\r\n\r\n  // const [open, setOpen] = useState(false)\r\n\r\n  const alterHeaderName =\r\n  column.field ? column.field.charAt(0).toUpperCase() + column.field.slice(1) : column.headerName.charAt(0).toUpperCase() + column.headerName.slice(1);\r\n  if (!(column.sortable || column.filter)) return <>{column.headerName ?? alterHeaderName}</>\r\n  if (column.sortable && !column.filter)\r\n    return (\r\n      <SortableHeaderCell\r\n        onSort={onSort}\r\n        sortDirection={sortDirection}\r\n        priority={priority}\r\n        isCellSelected={isCellSelected}\r\n        column={column}\r\n      >\r\n        {column.headerName  ?? alterHeaderName} \r\n      </SortableHeaderCell>\r\n    )\r\n  if (column.filter && !column.sortable)\r\n    return (\r\n      <>\r\n        <FilterRenderer column={column} isCellSelected={isCellSelected} alterHeaderName={alterHeaderName}>\r\n          {({ filters, ...rest }) => (\r\n            <div className={filterClassname}>\r\n              <input\r\n                {...rest}\r\n                value={filters?.[column.field]}\r\n                onChange={(e) =>\r\n                  setFilters({\r\n                    ...filters,\r\n                    [column.field]: e.target.value\r\n                  })\r\n                }\r\n                onKeyDown={inputStopPropagation}\r\n              />\r\n              {/* <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 16 16\" onClick={() => setOpen(true)}>\r\n                <path d=\"M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.128.334L10 8.692V13.5a.5.5 0 0 1-.342.474l-3 1A.5.5 0 0 1 6 14.5V8.692L1.628 3.834A.5.5 0 0 1 1.5 3.5v-2zm1 .5v1.308l4.372 4.858A.5.5 0 0 1 7 8.5v5.306l2-.666V8.5a.5.5 0 0 1 .128-.334L13.5 3.308V2h-11z\" />\r\n              </svg>\r\n              {open && <FiltersDropdown options={options} setFilters={setFilters} filters={filters} column={column} />} */}\r\n            </div>\r\n          )}\r\n        </FilterRenderer>\r\n      </>\r\n    )\r\n  if (column.filter && column.sortable)\r\n    return (\r\n      <>\r\n        <SortableHeaderCell\r\n          onSort={onSort}\r\n          sortDirection={sortDirection}\r\n          priority={priority}\r\n          isCellSelected={isCellSelected}\r\n        >\r\n          {column.headerName  ?? alterHeaderName}\r\n        </SortableHeaderCell> \r\n        <FilterRenderer column={column} isCellSelected={isCellSelected} alterHeaderName={alterHeaderName} >\r\n          {({ filters, ...rest }) => (\r\n            <div className={filterClassname}>\r\n              <input\r\n                {...rest}\r\n                value={filters?.[column.field]}\r\n                onChange={(e) =>\r\n                  setFilters({\r\n                    ...filters,\r\n                    [column.field]: e.target.value\r\n                  })\r\n                }\r\n                onKeyDown={inputStopPropagation}\r\n              />\r\n              {/* <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 16 16\" onClick={() => setOpen(true)}>\r\n                <path d=\"M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.128.334L10 8.692V13.5a.5.5 0 0 1-.342.474l-3 1A.5.5 0 0 1 6 14.5V8.692L1.628 3.834A.5.5 0 0 1 1.5 3.5v-2zm1 .5v1.308l4.372 4.858A.5.5 0 0 1 7 8.5v5.306l2-.666V8.5a.5.5 0 0 1 .128-.334L13.5 3.308V2h-11z\" />\r\n              </svg>\r\n              {open && <FiltersDropdown options={options} setFilters={setFilters} filters={filters} column={column} />} */}\r\n            </div>\r\n          )}\r\n        </FilterRenderer>\r\n      </>\r\n    )\r\n}\r\n\r\nfunction SortableHeaderCell({\r\n  onSort,\r\n  sortDirection,\r\n  priority,\r\n  children,\r\n  isCellSelected,\r\n  column\r\n}) {\r\n  const sortStatus = useDefaultComponents().sortStatus\r\n  const { ref, tabIndex } = useFocusRef(isCellSelected)\r\n\r\n  function handleKeyDown(event) {\r\n    if (event.key === \" \" || event.key === \"Enter\") {\r\n      // stop propagation to prevent scrolling\r\n      event.preventDefault()\r\n      onSort(event.ctrlKey || event.metaKey)\r\n    }\r\n  }\r\n\r\n  function handleClick(event) {\r\n    onSort(event.ctrlKey || event.metaKey)\r\n  }\r\n\r\n  return (\r\n    <span\r\n      ref={ref}\r\n      tabIndex={tabIndex}\r\n      className={headerSortCellClassname}\r\n      onClick={handleClick}\r\n      onKeyDown={handleKeyDown}\r\n    >\r\n      <span className={headerSortNameClassname}>{children}</span>\r\n      <span>{sortStatus({ sortDirection, priority })}</span>\r\n    </span>\r\n  )\r\n}\r\n\r\nfunction inputStopPropagation(event) {\r\n  if (['ArrowLeft', 'ArrowRight'].includes(event.key)) {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n\r\nfunction FilterRenderer({\r\n  isCellSelected,\r\n  column,\r\n  children,\r\n  alterHeaderName,\r\n}) {\r\n  const filters = useContext(FilterContext);\r\n  const { ref, tabIndex } = useFocusRef(isCellSelected);\r\n  return (\r\n    <>\r\n      {!column.sortable && <span className={headerSortNameClassname}>{column.headerName ?? alterHeaderName}</span>}\r\n      {filters.enabled && <div>{children({ ref, tabIndex, filters })}</div>}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { css } from \"@linaria/core\";\r\n\r\nimport defaultHeaderRenderer from \"./headerRenderer\";\r\nimport { getCellStyle, getCellClassname } from \"./utils\";\r\nimport { useRovingCellRef } from \"./hooks\";\r\nimport { filterColumnClassName } from \"./style\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nconst cellResizable = css`\r\n  @layer rdg.HeaderCell {\r\n    touch-action: none;\r\n\r\n    &::after {\r\n      content: \"\";\r\n      cursor: col-resize;\r\n      position: absolute;\r\n      inset-block-start: 0;\r\n      inset-inline-end: 0;\r\n      inset-block-end: 0;\r\n      inline-size: 10px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\r\n\r\nexport default function HeaderCell({\r\n  column,\r\n  columns,\r\n  rows,\r\n  colSpan,\r\n  isCellSelected,\r\n  onColumnResize,\r\n  allRowsSelected,\r\n  onAllRowsSelectionChange,\r\n  sortColumns,\r\n  onSortColumnsChange,\r\n  selectCell,\r\n  shouldFocusGrid,\r\n  selectedPosition,\r\n  selectedCellHeaderStyle,\r\n  direction,\r\n  setFilters,\r\n  handleReorderColumn,\r\n}) {\r\n  const isRtl = direction === \"rtl\";\r\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\r\n  const sortIndex = sortColumns?.findIndex(\r\n    (sort) => sort.columnKey === column.key\r\n  );\r\n  const sortColumn =\r\n    sortIndex !== undefined && sortIndex > -1\r\n      ? sortColumns[sortIndex]\r\n      : undefined;\r\n  const sortDirection = sortColumn?.direction;\r\n  const priority =\r\n    sortColumn !== undefined && sortColumns.length > 1\r\n      ? sortIndex + 1\r\n      : undefined;\r\n  const ariaSort =\r\n    sortDirection && !priority\r\n      ? sortDirection === \"ASC\"\r\n        ? \"ascending\"\r\n        : \"descending\"\r\n      : undefined;\r\n  var style = getCellStyle(column, colSpan);\r\n  selectedCellHeaderStyle && selectedPosition.idx === column.idx\r\n    ? (style = { ...style, ...selectedCellHeaderStyle })\r\n    : style;\r\n\r\n  const className = getCellClassname(\r\n    column,\r\n    column.headerCellClass,\r\n    column.filter && filterColumnClassName,\r\n    {\r\n      [cellResizableClassname]: column.resizable,\r\n    },\r\n    `rdg-header-column-${column.idx % 2 === 0 ? \"even\" : \"odd\"}`\r\n  );\r\n\r\n  const headerRenderer = column.headerRenderer ?? defaultHeaderRenderer;\r\n\r\n  function onPointerDown(event) {\r\n    if (event.pointerType === \"mouse\" && event.buttons !== 1) {\r\n      return;\r\n    }\r\n\r\n    const { currentTarget, pointerId } = event;\r\n    const { right, left } = currentTarget.getBoundingClientRect();\r\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\r\n\r\n    if (offset > 11) {\r\n      // +1px to account for the border size\r\n      return;\r\n    }\r\n\r\n    function onPointerMove(event) {\r\n      // prevents text selection in Chrome, which fixes scrolling the grid while dragging, and fixes re-size on an autosized column\r\n      event.preventDefault();\r\n      const { right, left } = currentTarget.getBoundingClientRect();\r\n      const width = isRtl\r\n        ? right + offset - event.clientX\r\n        : event.clientX + offset - left;\r\n      if (width > 0) {\r\n        onColumnResize(column, width);\r\n      }\r\n    }\r\n\r\n    function onLostPointerCapture() {\r\n      currentTarget.removeEventListener(\"pointermove\", onPointerMove);\r\n      currentTarget.removeEventListener(\r\n        \"lostpointercapture\",\r\n        onLostPointerCapture\r\n      );\r\n    }\r\n\r\n    currentTarget.setPointerCapture(pointerId);\r\n    currentTarget.addEventListener(\"pointermove\", onPointerMove);\r\n    currentTarget.addEventListener(\"lostpointercapture\", onLostPointerCapture);\r\n  }\r\n\r\n  function onSort(ctrlClick) {\r\n    if (onSortColumnsChange == null) return;\r\n    const { sortDescendingFirst } = column;\r\n    if (sortColumn === undefined) {\r\n      // not currently sorted\r\n      const nextSort = {\r\n        columnKey: column.key,\r\n        direction: sortDescendingFirst ? \"DESC\" : \"ASC\",\r\n      };\r\n      onSortColumnsChange(\r\n        sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]\r\n      );\r\n    } else {\r\n      let nextSortColumn;\r\n      if (\r\n        (sortDescendingFirst === true && sortDirection === \"DESC\") ||\r\n        (sortDescendingFirst !== true && sortDirection === \"ASC\")\r\n      ) {\r\n        nextSortColumn = {\r\n          columnKey: column.key,\r\n          direction: sortDirection === \"ASC\" ? \"DESC\" : \"ASC\",\r\n        };\r\n      }\r\n      if (ctrlClick) {\r\n        const nextSortColumns = [...sortColumns];\r\n        if (nextSortColumn) {\r\n          // swap direction\r\n          nextSortColumns[sortIndex] = nextSortColumn;\r\n        } else {\r\n          // remove sort\r\n          nextSortColumns.splice(sortIndex, 1);\r\n        }\r\n        onSortColumnsChange(nextSortColumns);\r\n      } else {\r\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\r\n      }\r\n    }\r\n  }\r\n\r\n  function onClick() {\r\n    selectCell(column.idx);\r\n  }\r\n\r\n  function onDoubleClick(event) {\r\n    const { right, left } = event.currentTarget.getBoundingClientRect();\r\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\r\n\r\n    if (offset > 11) {\r\n      // +1px to account for the border size\r\n      return;\r\n    }\r\n\r\n    onColumnResize(column, \"max-content\");\r\n  }\r\n\r\n  function handleFocus(event) {\r\n    onFocus?.(event);\r\n    if (shouldFocusGrid) {\r\n      // Select the first header cell if there is no selected cell\r\n      selectCell(0);\r\n    }\r\n  }\r\n\r\n  function handleColumnsReorder(sourceKey, targetKey) {\r\n    //console.log(\"sourceKey\", sourceKey, \" targetKey\", targetKey);\r\n    const sourceColumnIndex = columns.findIndex((c) => c.field === sourceKey);\r\n    const targetColumnIndex = columns.findIndex((c) => c.field === targetKey);\r\n    const reorderedColumns = [...columns];\r\n    //console.log(\"reorderedColumns\", reorderedColumns);\r\n    reorderedColumns.splice(\r\n      targetColumnIndex,\r\n      0,\r\n      reorderedColumns.splice(sourceColumnIndex, 1)[0]\r\n    );\r\n    handleReorderColumn([...reorderedColumns]);\r\n  }\r\n  const [{ isDragging }, drag] = useDrag({\r\n    type: \"COLUMN_DRAG\",\r\n    item: { key: column.key },\r\n    collect: (monitor) => ({ isDragging: monitor.isDragging() }),\r\n  });\r\n  const [{ isOver }, drop] = useDrop({\r\n    accept: \"COLUMN_DRAG\",\r\n    drop({ key }) {\r\n      handleColumnsReorder(key, column.key);\r\n    },\r\n    collect: (monitor) => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop(),\r\n    }),\r\n  });\r\n  return (\r\n    // rome-ignore lint/a11y/useKeyWithClickEvents: <explanation>\r\n    <div\r\n      role=\"columnheader\"\r\n      aria-colindex={column.idx + 1}\r\n      aria-selected={isCellSelected}\r\n      aria-sort={ariaSort}\r\n      aria-colspan={colSpan}\r\n      ref={(ele) => {\r\n        drag(ele);\r\n        drop(ele);\r\n      }}\r\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\r\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\r\n      className={className}\r\n      style={style}\r\n      onFocus={handleFocus}\r\n      onClick={onClick}\r\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\r\n      onPointerDown={column.resizable ? onPointerDown : undefined}>\r\n      {headerRenderer({\r\n        column,\r\n        rows,\r\n        sortDirection,\r\n        priority,\r\n        onSort,\r\n        allRowsSelected,\r\n        onAllRowsSelectionChange,\r\n        isCellSelected,\r\n        setFilters,\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { memo } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { css } from \"@linaria/core\";\r\n\r\nimport HeaderCell from \"./HeaderCell\";\r\nimport { getColSpan, getRowStyle } from \"./utils\";\r\nimport { cell, cellFrozen } from \"./style\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\n\r\nconst headerRow = css`\r\n  @layer rdg.HeaderRow {\r\n    display: contents;\r\n    line-height: var(--rdg-header-row-height);\r\n    background-color: var(--rdg-header-background-color);\r\n    font-weight: bold;\r\n    color: var(--rdg-header-row-color);\r\n    font-size: 11px;\r\n    text-align: center;\r\n\r\n    & > .${cell} {\r\n      /* Should have a higher value than 0 to show up above regular cells */\r\n      z-index: 1;\r\n      position: sticky;\r\n      inset-block-start: 0;\r\n    }\r\n\r\n    & > .${cellFrozen} {\r\n      z-index: 2;\r\n    }\r\n  }\r\n`;\r\n\r\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\r\n\r\nfunction HeaderRow({\r\n  columns,\r\n  rows,\r\n  allRowsSelected,\r\n  onAllRowsSelectionChange,\r\n  onColumnResize,\r\n  sortColumns,\r\n  onSortColumnsChange,\r\n  lastFrozenColumnIndex,\r\n  selectedCellIdx,\r\n  selectCell,\r\n  selectedCellHeaderStyle,\r\n  selectedPosition,\r\n  shouldFocusGrid,\r\n  direction,\r\n  setFilters,\r\n  handleReorderColumn,\r\n}) {\r\n  const cells = [];\r\n  for (let index = 0; index < columns.length; index++) {\r\n    const column = columns[index];\r\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\r\n      type: \"HEADER\",\r\n    });\r\n    if (colSpan !== undefined) {\r\n      index += colSpan - 1;\r\n    }\r\n\r\n    cells.push(\r\n      <HeaderCell\r\n        key={`${column.key}`}\r\n        column={column}\r\n        rows={rows}\r\n        handleReorderColumn={handleReorderColumn}\r\n        columns={columns}\r\n        colSpan={colSpan}\r\n        selectedPosition={selectedPosition}\r\n        selectedCellHeaderStyle={selectedCellHeaderStyle}\r\n        isCellSelected={selectedCellIdx === column.idx}\r\n        onColumnResize={onColumnResize}\r\n        allRowsSelected={allRowsSelected}\r\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\r\n        onSortColumnsChange={onSortColumnsChange}\r\n        sortColumns={sortColumns}\r\n        selectCell={selectCell}\r\n        shouldFocusGrid={shouldFocusGrid && index === 0}\r\n        direction={direction}\r\n        setFilters={setFilters}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <div\r\n        role=\"row\"\r\n        // aria-rowindex is 1 based\r\n        aria-rowindex={1}\r\n        className={clsx(headerRowClassname, {\r\n          // [rowSelectedClassname]: selectedCellIdx === -1,\r\n        })}\r\n        style={getRowStyle(1)}>\r\n        {cells}\r\n      </div>\r\n    </DndProvider>\r\n  );\r\n}\r\n\r\nexport default memo(HeaderRow);\r\n","import React from \"react\";\r\nimport { memo } from \"react\";\r\nimport { css } from \"@linaria/core\";\r\n\r\nimport { getCellStyle, getCellClassname, isCellEditable } from \"./utils\";\r\nimport { useRovingCellRef } from \"./hooks\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport moment from \"moment\";\r\nimport {\r\n  bottomRowIsSelectedClassName,\r\n  rowIsSelectedClassName,\r\n  topRowIsSelectedClassName,\r\n} from \"./style\";\r\nconst cellCopied = css`\r\n  @layer rdg.Cell {\r\n    background-color: #ccccff;\r\n  }\r\n`;\r\n\r\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\r\n\r\nconst cellDraggedOver = css`\r\n  @layer rdg.Cell {\r\n    background-color: #ccccff;\r\n\r\n    &.${cellCopied} {\r\n      background-color: #9999ff;\r\n    }\r\n  }\r\n`;\r\n\r\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\r\n\r\nfunction Cell({\r\n  column,\r\n  colSpan,\r\n  isCellSelected,\r\n  isCopied,\r\n  api,\r\n  isDraggedOver,\r\n  isRowSelected,\r\n  row,\r\n  rowIndex,\r\n  allrow,\r\n  dragHandle,\r\n  onRowClick,\r\n  onRowDoubleClick,\r\n  onRowChange,\r\n  selectCell,\r\n  node,\r\n  handleReorderRow,\r\n  totalColumns,\r\n  onCellClick,\r\n  onCellDoubleClick,\r\n  onCellContextMenu,\r\n  columnApi,\r\n  ...props\r\n}) {\r\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\r\n\r\n  const { cellClass } = column;\r\n  const topRow = rowIndex === 0 && isRowSelected ? true : false;\r\n  const bottomRow =\r\n    rowIndex === allrow.length - 1 && isRowSelected ? true : false;\r\n  const middleRow = !(topRow || bottomRow) && isRowSelected ? true : false;\r\n  const className = getCellClassname(\r\n    column,\r\n    `rdg-cell-column-${column.idx % 2 === 0 ? \"even\" : \"odd\"}`,\r\n    {\r\n      [cellCopiedClassname]: isCopied,\r\n      [cellDraggedOverClassname]: isDraggedOver,\r\n      [rowIsSelectedClassName]: middleRow,\r\n      [topRowIsSelectedClassName]: topRow,\r\n      [bottomRowIsSelectedClassName]: bottomRow,\r\n    },\r\n    typeof cellClass === \"function\" ? cellClass(row) : cellClass\r\n  );\r\n\r\n  function selectCellWrapper(openEditor) {\r\n    selectCell(row, column, openEditor);\r\n  }\r\n\r\n  function handleClick(e) {\r\n    selectCellWrapper(column.editorOptions?.editOnClick);\r\n    onRowClick?.({\r\n      api: api,\r\n      data: row,\r\n      columnApi: columnApi,\r\n      node: node,\r\n      rowIndex: rowIndex,\r\n      type: \"rowClicked\",\r\n      event: e,\r\n    });\r\n    onCellClick?.({\r\n      api: api,\r\n      colDef: {\r\n        field: column.field,\r\n        resizable: column.resizable ?? undefined,\r\n        sortable: column.sortable ?? undefined,\r\n        width: column.width,\r\n      },\r\n      data: row,\r\n      node: node,\r\n      columnApi: columnApi,\r\n      rowIndex: rowIndex,\r\n      value: row[column.field] ?? undefined,\r\n      type: \"cellClicked\",\r\n      event: e,\r\n    });\r\n  }\r\n\r\n  function handleContextMenu(e) {\r\n    selectCellWrapper();\r\n    onCellContextMenu?.({\r\n      api: api,\r\n      colDef: {\r\n        field: column.field,\r\n        resizable: column.resizable ?? undefined,\r\n        sortable: column.sortable ?? undefined,\r\n        width: column.width,\r\n      },\r\n      data: row,\r\n      node: node,\r\n      columnApi: columnApi,\r\n      rowIndex: rowIndex,\r\n      value: row[column.field] ?? undefined,\r\n      type: \"cellContextMenu\",\r\n      event: e,\r\n    });\r\n  }\r\n\r\n  function handleDoubleClick(e) {\r\n    selectCellWrapper(true);\r\n    onRowDoubleClick?.({\r\n      api: api,\r\n      data: row,\r\n      columnApi: columnApi,\r\n      node: node,\r\n      rowIndex: rowIndex,\r\n      type: \"rowDoubleClicked\",\r\n      event: e,\r\n    });\r\n    onCellDoubleClick?.({\r\n      api: api,\r\n      colDef: {\r\n        field: column.field,\r\n        resizable: column.resizable ?? undefined,\r\n        sortable: column.sortable ?? undefined,\r\n        width: column.width,\r\n      },\r\n      data: row,\r\n      node: node,\r\n      columnApi: columnApi,\r\n      rowIndex: rowIndex,\r\n      value: row[column.field] ?? undefined,\r\n      type: \"cellDoubleClicked\",\r\n      event: e,\r\n    });\r\n  }\r\n\r\n  function handleRowChange(newRow) {\r\n    onRowChange(column, newRow);\r\n  }\r\n\r\n  // -----------\r\n\r\n  var style = getCellStyle(column, colSpan);\r\n  style =\r\n    column.idx === 0 && isRowSelected\r\n      ? { ...style, ...{ borderInlineStart: \"1px solid #9bbb59\" } }\r\n      : { ...style };\r\n  style =\r\n    column.idx === totalColumns - 1 && isRowSelected\r\n      ? { ...style, ...{ borderInlineEnd: \"1px solid #9bbb59\" } }\r\n      : { ...style };\r\n  const rowSpan = column.rowSpan?.({ type: \"ROW\", row }) ?? undefined;\r\n\r\n  if (column.validation) {\r\n    const validationStyle = column.validation.style\r\n      ? column.validation.style\r\n      : { backgroundColor: \"red\" };\r\n      if( column.validation.method(row[column.key])){\r\n       (style = {\r\n          ...style,\r\n          ...validationStyle,\r\n        });\r\n      }\r\n  }\r\n\r\n  if (column.alignment) {\r\n    function alignmentUtils() {\r\n      var styles = style;\r\n      var symbol = [\"£\", \"$\", \"₹\", \"€\", \"¥\", \"₣\", \"¢\"];\r\n\r\n      if (\r\n        moment(row[column.key], \"YYYY-MM-DD\", true).isValid() ||\r\n        moment(row[column.key], \"YYYY/MM/DD\", true).isValid() ||\r\n        moment(row[column.key], \"YYYY-DD-MM\", true).isValid() ||\r\n        moment(row[column.key], \"YYYY/DD/MM\", true).isValid() ||\r\n        moment(row[column.key], \"MM-DD-YYYY\", true).isValid() ||\r\n        moment(row[column.key], \"MM/DD-YYYY\", true).isValid() ||\r\n        moment(row[column.key], \"DD-MM-YYYY\", true).isValid() ||\r\n        moment(row[column.key], \"DD/MM/YYYY\", true).isValid() ||\r\n        moment(row[column.key], \"DD-MMM-YYYY\", true).isValid() ||\r\n        moment(row[column.key], \"DD/MMM/YYYY\", true).isValid() ||\r\n        moment(row[column.key], \"MMM-DD-YYYY\", true).isValid() ||\r\n        moment(row[column.key], \"MMM/DD/YYYY\", true).isValid() ||\r\n        moment(row[column.key], \"YYYY-MMM-DD\", true).isValid() ||\r\n        moment(row[column.key], \"YYYY/MMM/DD\", true).isValid() ||\r\n        moment(row[column.key], \"YYYY-DD-MMM\", true).isValid() ||\r\n        moment(row[column.key], \"YYYY/DD/MMM\", true).isValid() ||\r\n        (column.alignment.type &&\r\n          column.alignment.type.toLowerCase() === \"date\")\r\n      ) {\r\n        const alignmentStyle = column.alignment.align\r\n          ? { textAlign: column.alignment.align }\r\n          : { textAlign: \"left\" };\r\n        styles = {\r\n          ...styles,\r\n          ...alignmentStyle,\r\n        };\r\n        return styles;\r\n      } else if (\r\n        moment(row[column.key], \"hh:mm\", true).isValid() ||\r\n        moment(row[column.key], \"hh:mm:ss\", true).isValid() ||\r\n        moment(row[column.key], \"hh:mm:ss a\", true).isValid() ||\r\n        (column.alignment.type &&\r\n          column.alignment.type.toLowerCase() === \"time\")\r\n      ) {\r\n        const alignment = column.alignment.align\r\n          ? { textAlign: column.alignment.align }\r\n          : { textAlign: \"left\" };\r\n        styles = {\r\n          ...styles,\r\n          ...alignment,\r\n        };\r\n        return styles;\r\n      } else if (\r\n        (typeof row[column.key] === \"number\" &&\r\n          column.alignment.type !== \"currency\") ||\r\n        (column.alignment.type &&\r\n          column.alignment.type.toLowerCase() === \"number\")\r\n      ) {\r\n        const alignment = column.alignment.align\r\n          ? { textAlign: column.alignment.align }\r\n          : { textAlign: \"end\" };\r\n        styles = {\r\n          ...styles,\r\n          ...alignment,\r\n        };\r\n        return styles;\r\n      } else if (\r\n        symbol.includes(JSON.stringify(row[column.key])[1]) ||\r\n        symbol.includes(\r\n          JSON.stringify(row[column.key])[row[column.key].length]\r\n        ) ||\r\n        (column.alignment.type &&\r\n          column.alignment.type.toLowerCase() === \"currency\")\r\n      ) {\r\n        const alignment = column.alignment.align\r\n          ? { textAlign: column.alignment.align }\r\n          : { textAlign: \"end\" };\r\n        styles = {\r\n          ...styles,\r\n          ...alignment,\r\n        };\r\n        return styles;\r\n      } else if (\r\n        (column.alignment.type &&\r\n          column.alignment.type.toLowerCase() === \"string\") ||\r\n        (column.alignment.type &&\r\n          column.alignment.type.toLowerCase() === \"text\") ||\r\n        typeof row[column.ley] === \"string\"\r\n      ) {\r\n        const alignment = column.alignment.align\r\n          ? { textAlign: column.alignment.align }\r\n          : { textAlign: \"left\" };\r\n        styles = {\r\n          ...styles,\r\n          ...alignment,\r\n        };\r\n        return styles;\r\n      } else {\r\n        const alignment = column.alignment.align\r\n          ? { textAlign: column.alignment.align }\r\n          : { textAlign: \"center\" };\r\n        styles = { ...styles, ...alignment };\r\n\r\n        return styles;\r\n      }\r\n    }\r\n\r\n    style = column.alignment.align\r\n      ? { ...style, textAlign: column.alignment.align }\r\n      : alignmentUtils({ column, row, style });\r\n  }\r\n  /// -----------------------\r\n\r\n  const [{ isDragging }, drag] = useDrag({\r\n    type: \"ROW_DRAG\",\r\n    item: { index: rowIndex },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n  function onRowReorder(fromIndex, toIndex) {\r\n    const newRows = [...allrow];\r\n    newRows.splice(toIndex, 0, newRows.splice(fromIndex, 1)[0]);\r\n    handleReorderRow(newRows);\r\n  }\r\n  const [{ isOver }, drop] = useDrop({\r\n    accept: \"ROW_DRAG\",\r\n    drop({ index }) {\r\n      onRowReorder(index, rowIndex);\r\n    },\r\n    collect: (monitor) => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop(),\r\n    }),\r\n  });\r\n  var renderObject = {\r\n    column,\r\n    colDef: column,\r\n    row,\r\n    data: row,\r\n    columnApi,\r\n    allrow,\r\n    api,\r\n    node,\r\n    rowIndex,\r\n    // value: row[column.key],\r\n    isCellSelected,\r\n    onRowChange: handleRowChange,\r\n  };\r\n  return (\r\n    <div\r\n      role=\"gridcell\"\r\n      // aria-colindex is 1-based\r\n      aria-colindex={column.idx + 1}\r\n      aria-selected={isCellSelected}\r\n      aria-colspan={colSpan}\r\n      aria-rowspan={rowSpan}\r\n      aria-readonly={!isCellEditable(column, row) || undefined}\r\n      ref={ref}\r\n      tabIndex={tabIndex}\r\n      className={className}\r\n      style={style}\r\n      onClick={handleClick}\r\n      onDoubleClick={handleDoubleClick}\r\n      onContextMenu={handleContextMenu}\r\n      onFocus={onFocus}\r\n      // title={`${row[column.key]}`}\r\n      {...props}\r\n    >\r\n      {!column.rowGroup && (\r\n        <>\r\n          {column.rowDrag && (\r\n            <div\r\n              ref={(ele) => {\r\n                drag(ele);\r\n                drop(ele);\r\n              }}\r\n            >\r\n              <span style={{ marginRight: \"10px\", cursor: \"grab\" }}>\r\n                &#9674;\r\n              </span>\r\n              {column.cellRenderer(renderObject)}\r\n            </div>\r\n          )}\r\n          {!column.rowDrag && column.cellRenderer(renderObject)}\r\n          {dragHandle}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Cell);\r\n","import React, { memo, forwardRef } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport Cell from \"./Cell\";\r\nimport { RowSelectionProvider, useLatestFunc } from \"./hooks\";\r\nimport { getColSpan, getRowStyle } from \"./utils\";\r\nimport { rowClassname, rowSelectedClassname } from \"./style\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\n\r\nfunction Row(\r\n  {\r\n    className,\r\n    rowIdx,\r\n    gridRowStart,\r\n    height,\r\n    selectedCellIdx,\r\n    isRowSelected,\r\n    copiedCellIdx,\r\n    draggedOverCellIdx,\r\n    lastFrozenColumnIndex,\r\n    api,\r\n    row,\r\n    selectedCellRowStyle,\r\n    rows,\r\n    node,\r\n    viewportColumns,\r\n    selectedCellEditor,\r\n    selectedCellDragHandle,\r\n    onRowClick,\r\n    onRowDoubleClick,\r\n    rowClass,\r\n    setDraggedOverRowIdx,\r\n    onMouseEnter,\r\n    onRowChange,\r\n    selectCell,\r\n    totalColumns,\r\n    handleReorderRow,\r\n    onCellClick,\r\n    onCellDoubleClick,\r\n    onCellContextMenu,\r\n    columnApi,\r\n    ...props\r\n  },\r\n  ref\r\n) {\r\n  const handleRowChange = useLatestFunc((column, newRow) => {\r\n    onRowChange(column, rowIdx, newRow);\r\n  });\r\n\r\n  function handleDragEnter(event) {\r\n    setDraggedOverRowIdx?.(rowIdx);\r\n    onMouseEnter?.(event);\r\n  }\r\n\r\n  className = clsx(\r\n    rowClassname,\r\n    `rdg-row-${rowIdx % 2 === 0 ? \"even\" : \"odd\"}`,\r\n    {\r\n      [rowSelectedClassname]: isRowSelected,\r\n    },\r\n    rowClass?.(row),\r\n    className\r\n  );\r\n\r\n  const cells = [];\r\n\r\n  var selectedCellRowIndex;\r\n\r\n  for (let index = 0; index < viewportColumns.length; index++) {\r\n    const column = { ...viewportColumns[index], rowIndex: rowIdx };\r\n    const { idx } = column;\r\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\r\n      type: \"ROW\",\r\n      row,\r\n    });\r\n    if (colSpan !== undefined) {\r\n      index += colSpan - 1;\r\n    }\r\n    const isCellSelected = selectedCellIdx === idx;\r\n    if (isCellSelected) {\r\n      selectedCellRowIndex = rowIdx;\r\n    }\r\n    if (isCellSelected && selectedCellEditor) {\r\n      cells.push(selectedCellEditor);\r\n    } else {\r\n      cells.push(\r\n        <Cell\r\n          key={`${column.key}`}\r\n          column={column}\r\n          colSpan={colSpan}\r\n          api={api}\r\n          row={row}\r\n          handleReorderRow={handleReorderRow}\r\n          isRowSelected={isRowSelected}\r\n          allrow={rows}\r\n          rowIndex={rowIdx}\r\n          totalColumns={totalColumns}\r\n          node={node}\r\n          isCopied={copiedCellIdx === idx}\r\n          isDraggedOver={draggedOverCellIdx === idx}\r\n          isCellSelected={isCellSelected}\r\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\r\n          onRowClick={onRowClick}\r\n          onRowDoubleClick={onRowDoubleClick}\r\n          onRowChange={handleRowChange}\r\n          selectCell={selectCell}\r\n          onCellClick={onCellClick}\r\n          onCellDoubleClick={onCellDoubleClick}\r\n          onCellContextMenu={onCellContextMenu}\r\n          columnApi={columnApi}\r\n        />\r\n      );\r\n    }\r\n  }\r\n  var style = getRowStyle(gridRowStart, height);\r\n  if (rowIdx === selectedCellRowIndex) {\r\n    style = { ...style, ...selectedCellRowStyle };\r\n  }\r\n\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <RowSelectionProvider value={isRowSelected}>\r\n        <div\r\n          role=\"row\"\r\n          ref={ref}\r\n          id={row?.id ?? rowIdx}\r\n          className={className}\r\n          onMouseEnter={handleDragEnter}\r\n          style={style}\r\n          {...props}\r\n        >\r\n          {cells}\r\n        </div>\r\n      </RowSelectionProvider>\r\n    </DndProvider>\r\n  );\r\n}\r\n\r\nconst RowComponent = memo(forwardRef(Row));\r\n\r\nexport default RowComponent;\r\n\r\nexport function defaultRowRenderer(key, props) {\r\n  return <RowComponent key={key} {...props} />;\r\n}\r\n","import React from 'react';\r\nimport { memo } from \"react\"\r\n\r\nimport { getCellStyle, getCellClassname } from \"./utils\"\r\nimport { useRovingCellRef } from \"./hooks\"\r\n\r\nfunction GroupCell({\r\n  id,\r\n  groupKey,\r\n  childRows,\r\n  isExpanded,\r\n  isCellSelected,\r\n  column,\r\n  row,\r\n  groupColumnIndex,\r\n  toggleGroup: toggleGroupWrapper\r\n}) {\r\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected)\r\n\r\n  function toggleGroup() {\r\n    toggleGroupWrapper(id)\r\n  }\r\n\r\n  // Only make the cell clickable if the group level matches\r\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx\r\n\r\n  return (\r\n    // rome-ignore lint/a11y/useKeyWithClickEvents: <explanation>\r\n<div\r\n      role=\"gridcell\"\r\n      aria-colindex={column.idx + 1}\r\n      aria-selected={isCellSelected}\r\n      ref={ref}\r\n      tabIndex={tabIndex}\r\n      key={column.key}\r\n      className={getCellClassname(column)}\r\n      style={{\r\n        ...getCellStyle(column),\r\n        cursor: isLevelMatching ? \"pointer\" : \"default\"\r\n      }}\r\n      onClick={isLevelMatching ? toggleGroup : undefined}\r\n      onFocus={onFocus}\r\n    >\r\n      {(!column.rowGroup || groupColumnIndex === column.idx) &&\r\n        column.groupFormatter?.({\r\n          groupKey,\r\n          childRows,\r\n          column,\r\n          row,\r\n          isExpanded,\r\n          isCellSelected,\r\n          toggleGroup\r\n        })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(GroupCell)\r\n","import React from \"react\";\r\nimport { memo } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { css } from \"@linaria/core\";\r\n\r\nimport {\r\n  cell,\r\n  cellFrozenLast,\r\n  rowClassname,\r\n  rowSelectedClassname,\r\n} from \"./style\";\r\nimport { SELECT_COLUMN_KEY } from \"./Columns\";\r\nimport GroupCell from \"./GroupCell\";\r\nimport { RowSelectionProvider } from \"./hooks\";\r\nimport { getRowStyle } from \"./utils\";\r\n\r\nconst groupRow = css`\r\n  @layer rdg.GroupedRow {\r\n    &:not([aria-selected=\"true\"]) {\r\n      background-color: var(--rdg-header-background-color);\r\n    }\r\n\r\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\r\n      border-inline-end: none;\r\n    }\r\n  }\r\n`;\r\n\r\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\r\n\r\nfunction GroupedRow({\r\n  id,\r\n  groupKey,\r\n  viewportColumns,\r\n  childRows,\r\n  rowIdx,\r\n  row,\r\n  gridRowStart,\r\n  height,\r\n  level,\r\n  isExpanded,\r\n  selectedCellIdx,\r\n  isRowSelected,\r\n  selectGroup,\r\n  toggleGroup,\r\n  ...props\r\n}) {\r\n  // Select is always the first column\r\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\r\n\r\n  function handleSelectGroup() {\r\n    selectGroup(rowIdx);\r\n  }\r\n\r\n  return (\r\n    <RowSelectionProvider value={isRowSelected}>\r\n      <div\r\n        role=\"row\"\r\n        aria-level={level}\r\n        aria-expanded={isExpanded}\r\n        className={clsx(\r\n          rowClassname,\r\n          groupRowClassname,\r\n          `rdg-row-groupRow-${rowIdx % 2 === 0 ? \"even\" : \"odd\"}`,\r\n          {\r\n            [rowSelectedClassname]: selectedCellIdx === -1,\r\n          }\r\n        )}\r\n        onClick={handleSelectGroup}\r\n        style={getRowStyle(gridRowStart, height)}\r\n        {...props}>\r\n        {viewportColumns.map((column) => (\r\n          <GroupCell\r\n            key={`${column.key}`}\r\n            id={id}\r\n            groupKey={groupKey}\r\n            childRows={childRows}\r\n            isExpanded={isExpanded}\r\n            isCellSelected={selectedCellIdx === column.idx}\r\n            column={column}\r\n            row={row}\r\n            groupColumnIndex={idx}\r\n            toggleGroup={toggleGroup}\r\n          />\r\n        ))}\r\n      </div>\r\n    </RowSelectionProvider>\r\n  );\r\n}\r\n\r\nexport default memo(GroupedRow);\r\n","import React from \"react\";\r\nimport { memo } from \"react\";\r\nimport { css } from \"@linaria/core\";\r\n\r\nimport { getCellStyle, getCellClassname } from \"./utils\";\r\nimport { useRovingCellRef } from \"./hooks\";\r\n\r\nexport const summaryCellClassname = css`\r\n  @layer rdg.SummaryCell {\r\n    inset-block-start: var(--rdg-summary-row-top);\r\n    inset-block-end: var(--rdg-summary-row-bottom);\r\n  }\r\n`;\r\n\r\nfunction SummaryCell({ column, colSpan, row, isCellSelected, selectCell }) {\r\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\r\n  const { summaryCellClass } = column;\r\n  const className = getCellClassname(\r\n    column,\r\n    summaryCellClassname,\r\n    `rdg-summary-column-${column.idx % 2 === 0 ? \"even\" : \"odd\"}`,\r\n    typeof summaryCellClass === \"function\"\r\n      ? summaryCellClass(row)\r\n      : summaryCellClass\r\n  );\r\n\r\n  function onClick() {\r\n    selectCell(row, column);\r\n  }\r\n\r\n  return (\r\n    // rome-ignore lint/a11y/useKeyWithClickEvents: <explanation>\r\n    <div\r\n      role=\"gridcell\"\r\n      aria-colindex={column.idx + 1}\r\n      aria-colspan={colSpan}\r\n      aria-selected={isCellSelected}\r\n      ref={ref}\r\n      tabIndex={tabIndex}\r\n      className={className}\r\n      style={getCellStyle(column, colSpan)}\r\n      onClick={onClick}\r\n      onFocus={onFocus}>\r\n      {column.summaryFormatter?.({ column, row, isCellSelected })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(SummaryCell);\r\n","import React from \"react\";\r\nimport { memo } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { css } from \"@linaria/core\";\r\n\r\nimport { cell, cellFrozen, rowClassname, rowSelectedClassname } from \"./style\";\r\nimport { getColSpan, getRowStyle } from \"./utils\";\r\nimport SummaryCell from \"./SummaryCell\";\r\n\r\nconst summaryRow = css`\r\n  @layer rdg.SummaryRow {\r\n    line-height: var(--rdg-sumary-row-height);\r\n\r\n    > .${cell} {\r\n      position: sticky;\r\n    }\r\n  }\r\n`;\r\n\r\nconst topSummaryRow = css`\r\n  @layer rdg.SummaryRow {\r\n    > .${cell} {\r\n      z-index: 1;\r\n    }\r\n\r\n    > .${cellFrozen} {\r\n      z-index: 2;\r\n    }\r\n  }\r\n`;\r\n\r\nconst topSummaryRowBorderClassname = css`\r\n  @layer rdg.SummaryRow {\r\n    > .${cell} {\r\n      border-block-end: 2px solid var(--rdg-summary-border-color);\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n  }\r\n`;\r\n\r\nconst bottomSummaryRowBorderClassname = css`\r\n  @layer rdg.SummaryRow {\r\n    > .${cell} {\r\n      border-block-start: 2px solid var(--rdg-summary-border-color);\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n  }\r\n`;\r\n\r\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\r\n\r\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\r\n\r\nfunction SummaryRow({\r\n  rowIdx,\r\n  gridRowStart,\r\n  row,\r\n  viewportColumns,\r\n  top,\r\n  bottom,\r\n  lastFrozenColumnIndex,\r\n  selectedCellIdx,\r\n  lastTopRowIdx,\r\n  selectCell,\r\n  \"aria-rowindex\": ariaRowIndex,\r\n}) {\r\n  const cells = [];\r\n  for (let index = 0; index < viewportColumns.length; index++) {\r\n    const column = viewportColumns[index];\r\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\r\n      type: \"SUMMARY\",\r\n      row,\r\n    });\r\n    if (colSpan !== undefined) {\r\n      index += colSpan - 1;\r\n    }\r\n\r\n    const isCellSelected = selectedCellIdx === column.idx;\r\n\r\n    cells.push(\r\n      <SummaryCell\r\n        key={`${column.key}`}\r\n        column={column}\r\n        colSpan={colSpan}\r\n        row={row}\r\n        isCellSelected={isCellSelected}\r\n        selectCell={selectCell}\r\n      />\r\n    );\r\n  }\r\n\r\n  const isTop = lastTopRowIdx !== undefined;\r\n\r\n  return (\r\n    <div\r\n      role=\"row\"\r\n      aria-rowindex={ariaRowIndex}\r\n      className={clsx(\r\n        rowClassname,\r\n        `rdg-row-summary-row-${rowIdx % 2 === 0 ? \"even\" : \"odd\"}`,\r\n        summaryRowClassname,\r\n        {\r\n          [rowSelectedClassname]: selectedCellIdx === -1,\r\n          [topSummaryRowClassname]: isTop,\r\n          [topSummaryRowBorderClassname]: isTop && lastTopRowIdx === rowIdx,\r\n          [bottomSummaryRowBorderClassname]: !isTop && rowIdx === 0,\r\n          \"rdg-bottom-summary-row\": !isTop,\r\n        }\r\n      )}\r\n      style={{\r\n        ...getRowStyle(gridRowStart),\r\n        \"--rdg-summary-row-top\": top !== undefined ? `${top}px` : undefined,\r\n        \"--rdg-summary-row-bottom\":\r\n          bottom !== undefined ? `${bottom}px` : undefined,\r\n      }}>\r\n      {cells}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(SummaryRow);\r\n","import React from \"react\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { css } from \"@linaria/core\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { useLatestFunc } from \"./hooks\";\r\nimport { getCellStyle, getCellClassname, onEditorNavigation } from \"./utils\";\r\n\r\n/*\r\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\r\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\r\n *\r\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\r\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\r\n *\r\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\r\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\r\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\r\n * Usually we want click event handlers from parent components to access the latest commited values,\r\n * so `mousedown` is used instead of `click`.\r\n *\r\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\r\n */\r\n\r\nconst cellEditing = css`\r\n  @layer rdg.EditCell {\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nexport default function EditCell({\r\n  column,\r\n  colSpan,\r\n  row,\r\n  allrow,\r\n  rowIndex,\r\n  onRowChange,\r\n  api,\r\n  node,\r\n  closeEditor,\r\n  handleReorderRow,\r\n}) {\r\n  const frameRequestRef = useRef();\r\n  const commitOnOutsideClick =\r\n    column.editorOptions?.commitOnOutsideClick !== false;\r\n\r\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\r\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\r\n  // To that end we instead access the latest props via useLatestFunc.\r\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\r\n    onClose(true);\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!commitOnOutsideClick) return;\r\n\r\n    function onWindowCaptureMouseDown() {\r\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-globals\r\n    addEventListener(\"mousedown\", onWindowCaptureMouseDown, { capture: true });\r\n\r\n    return () => {\r\n      // eslint-disable-next-line no-restricted-globals\r\n      removeEventListener(\"mousedown\", onWindowCaptureMouseDown, {\r\n        capture: true,\r\n      });\r\n      cancelFrameRequest();\r\n    };\r\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\r\n\r\n  function cancelFrameRequest() {\r\n    cancelAnimationFrame(frameRequestRef.current);\r\n  }\r\n\r\n  function onKeyDown(event) {\r\n    if (event.key === \"Escape\") {\r\n      event.stopPropagation();\r\n      // Discard changes\r\n      onClose();\r\n    } else if (event.key === \"Enter\") {\r\n      event.stopPropagation();\r\n      onClose(true);\r\n    } else {\r\n      const onNavigation =\r\n        column.editorOptions?.onNavigation ?? onEditorNavigation;\r\n      if (!onNavigation(event)) {\r\n        event.stopPropagation();\r\n      }\r\n    }\r\n  }\r\n\r\n  function onClose(commitChanges) {\r\n    if (commitChanges) {\r\n      onRowChange(row, true);\r\n    } else {\r\n      closeEditor();\r\n    }\r\n  }\r\n\r\n  const { cellClass } = column;\r\n  const className = getCellClassname(\r\n    column,\r\n    \"rdg-editor-container\",\r\n    !column.editorOptions?.renderFormatter && cellEditing,\r\n    typeof cellClass === \"function\" ? cellClass(row) : cellClass\r\n  );\r\n\r\n  const [{ isDragging }, drag] = useDrag({\r\n    type: \"ROW_DRAG\",\r\n    item: { index: rowIndex },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n  function onRowReorder(fromIndex, toIndex) {\r\n    console.log(\"fromIndex\", fromIndex, \"toIndex\", toIndex);\r\n    const newRows = [...allrow];\r\n    newRows.splice(toIndex, 0, newRows.splice(fromIndex, 1)[0]);\r\n    handleReorderRow(newRows);\r\n  }\r\n  const [{ isOver }, drop] = useDrop({\r\n    accept: \"ROW_DRAG\",\r\n    drop({ index }) {\r\n      onRowReorder(index, rowIndex);\r\n    },\r\n    collect: (monitor) => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop(),\r\n    }),\r\n  });\r\n  return (\r\n    <div\r\n      role=\"gridcell\"\r\n      // aria-colindex is 1-based\r\n      aria-colindex={column.idx + 1}\r\n      aria-colspan={colSpan}\r\n      aria-selected\r\n      className={className}\r\n      style={getCellStyle(column, colSpan)}\r\n      onKeyDown={onKeyDown}\r\n      onMouseDownCapture={commitOnOutsideClick ? cancelFrameRequest : undefined}\r\n    >\r\n      {column.rowDrag && (\r\n        <div\r\n          ref={(ele) => {\r\n            drag(ele);\r\n            drop(ele);\r\n          }}\r\n        >\r\n          <span style={{ marginRight: \"10px\", cursor: \"grab\" }}>&#9674;</span>\r\n          {(column.cellEditor != null || column.editable === true) && (\r\n            <>\r\n              {column.cellEditor({\r\n                column,\r\n                colDef: column,\r\n                row,\r\n                data: row,\r\n                onRowChange,\r\n                value: row[column.key],\r\n                node,\r\n                valueFormatted: column.valueFormatter,\r\n                allrow,\r\n                rowIndex,\r\n                api,\r\n                onClose,\r\n              })}\r\n              {column.editorOptions?.renderFormatter &&\r\n                column.editable !== true &&\r\n                column.formatter({\r\n                  colDef: column,\r\n                  column,\r\n                  data: row,\r\n                  row,\r\n                  api,\r\n                  node,\r\n                  value: row[column.key],\r\n                  valueFormatted: column.valueFormatter,\r\n                  onRowChange,\r\n                  isCellSelected: true,\r\n                 \r\n                })}\r\n              {column.editable &&\r\n                column.formatter({\r\n                  colDef: column,\r\n                  column,\r\n                  data: row,\r\n                  row,\r\n                  api,\r\n                  node,\r\n                  value: row[column.key],\r\n                  valueFormatted: column.valueFormatter,\r\n                  onRowChange,\r\n                  isCellSelected: true,\r\n                })}\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n      {(column.cellEditor != null || column.editable === true) &&\r\n        !column.rowDrag && (\r\n          <>\r\n            {column.cellEditor({\r\n              column,\r\n              colDef: column,\r\n              row,\r\n              data: row,\r\n              onRowChange,\r\n              value: row[column.key],\r\n              node,\r\n              valueFormatted: column.valueFormatter,\r\n              allrow,\r\n              rowIndex,\r\n              api,\r\n              onClose,\r\n            })}\r\n            {column.editorOptions?.renderFormatter &&\r\n              column.editable !== true &&\r\n              column.formatter({\r\n                colDef: column,\r\n                column,\r\n                data: row,\r\n                row,\r\n                api,\r\n                node,\r\n                value: row[column.key],\r\n                valueFormatted: column.valueFormatter,\r\n                onRowChange,\r\n                isCellSelected: true,\r\n               \r\n              })}\r\n            {column.editable &&\r\n              column.formatter({\r\n                colDef: column,\r\n                column,\r\n                data: row,\r\n                row,\r\n                api,\r\n                node,\r\n                value: row[column.key],\r\n                valueFormatted: column.valueFormatter,\r\n                onRowChange,\r\n                isCellSelected: true,\r\n              })}\r\n          </>\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { css } from \"@linaria/core\"\r\n\r\nconst cellDragHandle = css`\r\n  @layer rdg.DragHandle {\r\n    cursor: move;\r\n    position: absolute;\r\n    inset-inline-end: 0;\r\n    inset-block-end: 0;\r\n    inline-size: 8px;\r\n    block-size: 8px;\r\n    background-color: var(--rdg-selection-color);\r\n\r\n    &:hover {\r\n      inline-size: 16px;\r\n      block-size: 16px;\r\n      border: 2px solid var(--rdg-selection-color);\r\n      background-color: var(--rdg-background-color);\r\n    }\r\n  }\r\n`\r\n\r\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`\r\n\r\nexport default function DragHandle({\r\n  rows,\r\n  columns,\r\n  selectedPosition,\r\n  latestDraggedOverRowIdx,\r\n  isCellEditable,\r\n  onRowsChange,\r\n  onFill,\r\n  setDragging,\r\n  setDraggedOverRowIdx\r\n}) {\r\n  function handleMouseDown(event) {\r\n    if (event.buttons !== 1) return\r\n    setDragging(true)\r\n    window.addEventListener(\"mouseover\", onMouseOver)\r\n    window.addEventListener(\"mouseup\", onMouseUp)\r\n\r\n    function onMouseOver(event) {\r\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\r\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\r\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\r\n      if (event.buttons !== 1) onMouseUp()\r\n    }\r\n\r\n    function onMouseUp() {\r\n      window.removeEventListener(\"mouseover\", onMouseOver)\r\n      window.removeEventListener(\"mouseup\", onMouseUp)\r\n      setDragging(false)\r\n      handleDragEnd()\r\n    }\r\n  }\r\n\r\n  function handleDragEnd() {\r\n    const overRowIdx = latestDraggedOverRowIdx.current\r\n    if (overRowIdx === undefined) return\r\n\r\n    const { rowIdx } = selectedPosition\r\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx\r\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx\r\n    updateRows(startRowIndex, endRowIndex)\r\n    setDraggedOverRowIdx(undefined)\r\n  }\r\n\r\n  function handleDoubleClick(event) {\r\n    event.stopPropagation()\r\n    updateRows(selectedPosition.rowIdx + 1, rows.length)\r\n  }\r\n\r\n  function updateRows(startRowIdx, endRowIdx) {\r\n    const { idx, rowIdx } = selectedPosition\r\n    const column = columns[idx]\r\n    const sourceRow = rows[rowIdx]\r\n    const updatedRows = [...rows]\r\n    const indexes = []\r\n    for (let i = startRowIdx; i < endRowIdx; i++) {\r\n      if (isCellEditable({ rowIdx: i, idx })) {\r\n        const updatedRow = onFill({\r\n          columnKey: column.key,\r\n          sourceRow,\r\n          targetRow: rows[i]\r\n        })\r\n        if (updatedRow !== rows[i]) {\r\n          updatedRows[i] = updatedRow\r\n          indexes.push(i)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (indexes.length > 0) {\r\n      onRowsChange?.(updatedRows, { indexes, column })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={cellDragHandleClassname}\r\n      onMouseDown={handleMouseDown}\r\n      onDoubleClick={handleDoubleClick}\r\n    />\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { css } from \"@linaria/core\"\r\n\r\nconst arrow = css`\r\n  @layer rdg.SortIcon {\r\n    fill: currentColor;\r\n\r\n    > path {\r\n      transition: d 0.1s;\r\n    }\r\n  }\r\n`\r\n\r\nconst arrowClassname = `rdg-sort-arrow ${arrow}`\r\n\r\nexport default function sortStatus({ sortDirection, priority }) {\r\n  return (\r\n    <>\r\n      {sortIcon({ sortDirection })}\r\n      {sortPriority({ priority })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport function sortIcon({ sortDirection }) {\r\n  if (sortDirection === undefined) return null\r\n\r\n  return (\r\n    <svg\r\n      viewBox=\"0 0 12 8\"\r\n      width=\"12\"\r\n      height=\"8\"\r\n      className={arrowClassname}\r\n      aria-hidden\r\n    >\r\n      <path d={sortDirection === \"ASC\" ? \"M0 8 6 0 12 8\" : \"M0 0 6 8 12 0\"} />\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport function sortPriority({ priority }) {\r\n  return priority\r\n}\r\n","// import React from \"react\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport jsPDF from \"jspdf\";\r\nimport autoTable from \"jspdf-autotable\";\r\n\r\nexport function CSVContent(fileData, columns) {\r\n  const field = columns?.map((ele) => ele.field);\r\n  const header = columns?.map((ele) => ele.headerName);\r\n  const data = fileData.map((f) => {\r\n    let sample = [];\r\n    field.map((d) => {\r\n      if (d !== undefined) {\r\n        sample.push(f[d]);\r\n      } else {\r\n        sample.push(\"\");\r\n      }\r\n    });\r\n    if (sample.length > 0) {\r\n      return sample;\r\n    }\r\n  });\r\n  const content = [header, ...data]\r\n    .map((cells) => cells.map(serialiseCellValue).join(\",\"))\r\n    .join(\"\\n\");\r\n  return content;\r\n}\r\nexport async function exportToCsv(fileData, columns, fileName) {\r\n  downloadFile(\r\n    fileName,\r\n    new Blob([CSVContent(fileData, columns)], {\r\n      type: \"text/csv;charset=utf-8;\",\r\n    })\r\n  );\r\n}\r\n\r\nexport async function exportToPdf(fileData, columns, fileName) {\r\n  var field = [];\r\n  columns?.map((ele) => {\r\n    if (ele.field) {\r\n      field.push({ dataKey: ele.field, header: ele.headerName });\r\n    }\r\n  });\r\n\r\n  var doc = new jsPDF(\"p\", \"pt\", \"letter\");\r\n  autoTable(doc, { html: \"#my-table\" });\r\n  autoTable(doc, {\r\n    margin: { top: 10 },\r\n    styles: { cellWidth: \"wrap\", overflow: \"visible\", halign: \"center\" },\r\n    headStyles: {\r\n      fillColor: \"#16365D\",\r\n      textColor: \"white\",\r\n      halign: \"center\",\r\n      lineColor: \"White\",\r\n      lineWidth: 1,\r\n    },\r\n    body: fileData,\r\n    theme: \"striped\",\r\n    columns: field,\r\n  });\r\n\r\n  doc.save(fileName);\r\n}\r\n\r\nexport function exportToXlsx(fileData, columns, fileName) {\r\n  const fileType =\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n  const fileExtension = \".xlsx\";\r\n\r\n  const ws = XLSX.utils.json_to_sheet(fileData);\r\n  const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n  const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n  const data = new Blob([excelBuffer], { type: fileType });\r\n  FileSaver.saveAs(data, fileName + fileExtension);\r\n}\r\n\r\nfunction serialiseCellValue(value) {\r\n  if (typeof value === \"string\") {\r\n    const formattedValue = value.replace(/\"/g, '\"\"');\r\n    return formattedValue.includes(\",\")\r\n      ? `\"${formattedValue}\"`\r\n      : formattedValue;\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction downloadFile(fileName, data) {\r\n  const downloadLink = document.createElement(\"a\");\r\n  downloadLink.download = fileName;\r\n  const url = URL.createObjectURL(data);\r\n  downloadLink.href = url;\r\n  downloadLink.click();\r\n  URL.revokeObjectURL(url);\r\n}\r\n","import React, { useState } from 'react'\r\nimport { css } from \"@linaria/core\"\r\nimport { exportToCsv, exportToPdf, exportToXlsx } from './exportUtils'\r\n\r\nconst toolbarClassname = css`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 8px;\r\n  margin-block-end: 8px;\r\n`\r\nconst ExportData = (props) => {\r\n  return (\r\n    <>\r\n    <div className={toolbarClassname}>\r\n        <ExportButton\r\n          onExport={() => exportToCsv(props.gridElement, \"CommonFeatures.csv\")}\r\n        >\r\n          Export to CSV\r\n        </ExportButton>\r\n        <ExportButton\r\n          onExport={() => exportToXlsx(props.gridElement, \"CommonFeatures.xlsx\")}\r\n        >\r\n          Export to XSLX\r\n        </ExportButton>\r\n        <ExportButton\r\n          onExport={() => exportToPdf(props.gridElement, \"CommonFeatures.pdf\")}\r\n        >\r\n          Export to PDF\r\n        </ExportButton>\r\n      </div>\r\n      {props.gridElement}\r\n    </>\r\n  )\r\n}\r\nexport function ExportButton({ onExport, children }) {\r\n    const [exporting, setExporting] = useState(false)\r\n    return (\r\n      <button\r\n        disabled={exporting}\r\n        onClick={async () => {\r\n          setExporting(true)\r\n          await onExport()\r\n          setExporting(false)\r\n        }}\r\n      >\r\n        {exporting ? \"Exporting\" : children}\r\n      </button>\r\n    )\r\n  }\r\n  \r\nexport default ExportData;","import React, {\r\n  forwardRef,\r\n  useState,\r\n  useRef,\r\n  useImperativeHandle,\r\n  useCallback,\r\n  useMemo,\r\n  useEffect,\r\n} from \"react\";\r\nimport { flushSync } from \"react-dom\";\r\nimport clsx from \"clsx\";\r\nimport { groupBy as rowGrouper, isString, _ } from \"lodash\";\r\nimport { createPortal } from \"react-dom\";\r\nimport {\r\n  ContextMenu,\r\n  MenuItem,\r\n  SubMenu,\r\n  ContextMenuTrigger,\r\n} from \"react-contextmenu\";\r\nimport { css } from \"@linaria/core\";\r\nimport {\r\n  rootClassname,\r\n  viewportDraggingClassname,\r\n  focusSinkClassname,\r\n  rowSelected,\r\n  rowSelectedWithFrozenCell,\r\n  filterContainerClassname,\r\n} from \"./style\";\r\nimport {\r\n  useLayoutEffect,\r\n  useGridDimensions,\r\n  useCalculatedColumns,\r\n  useViewportColumns,\r\n  useViewportRows,\r\n  useLatestFunc,\r\n  RowSelectionChangeProvider,\r\n} from \"./hooks\";\r\nimport HeaderRow from \"./HeaderRow\";\r\nimport RowComponent, { defaultRowRenderer } from \"./Row\";\r\nimport GroupRowRenderer from \"./GroupRow\";\r\nimport SummaryRow from \"./SummaryRow\";\r\nimport EditCell from \"./EditCell\";\r\nimport DragHandle from \"./DragHandle\";\r\nimport { default as defaultSortStatus } from \"./sortStatus\";\r\nimport { checkboxFormatter as defaultCheckboxFormatter } from \"./formatters\";\r\nimport {\r\n  DataGridDefaultComponentsProvider,\r\n  useDefaultComponents,\r\n} from \"./DataGridDefaultComponentsProvider\";\r\nimport {\r\n  assertIsValidKeyGetter,\r\n  getNextSelectedCellPosition,\r\n  isSelectedCellEditable,\r\n  canExitGrid,\r\n  isCtrlKeyHeldDown,\r\n  isDefaultCellInput,\r\n  getColSpan,\r\n  sign,\r\n  abs,\r\n  getSelectedCellColSpan,\r\n  renderMeasuringCells,\r\n  scrollIntoView,\r\n} from \"./utils\";\r\nimport FilterContext from \"./filterContext\";\r\nimport { SelectColumn, SerialNumberColumn } from \"./Columns\";\r\nimport { exportToCsv, exportToPdf, exportToXlsx } from \"./exportUtils\";\r\nimport { ExportButton } from \"./ExportData\";\r\nimport Pagination from \"rc-pagination\";\r\nimport \"./pagination.css\";\r\n\r\nconst initialPosition = {\r\n  idx: -1,\r\n  rowIdx: -2,\r\n  mode: \"SELECT\",\r\n};\r\n\r\n/**\r\n * Main API Component to render a data grid of rows and columns\r\n *\r\n * @example\r\n *\r\n * <DataGrid columns={columns} rows={rows} />\r\n */\r\nfunction DataGrid(props, ref) {\r\n  let {\r\n    // Grid and data Props\r\n    columnData: raawColumns,\r\n    rowData: raawRows,\r\n    topSummaryRows,\r\n    bottomSummaryRows,\r\n    rowKeyGetter,\r\n    onRowsChange,\r\n    // Dimensions props\r\n    rowHeight: rawRowHeight,\r\n    headerRowHeight: rawHeaderRowHeight,\r\n    summaryRowHeight: rawSummaryRowHeight,\r\n    // Feature props\r\n    selectedRows,\r\n    onSelectedRowsChange,\r\n    defaultColumnOptions,\r\n    groupBy: raawGroupBy,\r\n    expandedGroupIds,\r\n    onExpandedGroupIdsChange,\r\n    // Event props\r\n    onRowClicked: onRowClick,\r\n    onRowDoubleClicked: onRowDoubleClick,\r\n    selectedCellHeaderStyle,\r\n    onScroll,\r\n    onColumnResize,\r\n    onFill,\r\n    serialNumber,\r\n    onCopy,\r\n    onPaste,\r\n    selectedCellRowStyle,\r\n    onCellClicked: onCellClick,\r\n    onCellDoubleClicked: onCellDoubleClick,\r\n    onCellContextMenu,\r\n    // Toggles and modes\r\n    cellNavigationMode: rawCellNavigationMode,\r\n    enableVirtualization: rawEnableVirtualization,\r\n    // Miscellaneous\r\n    renderers,\r\n    className,\r\n    showSelectedRows,\r\n    style,\r\n    rowClass,\r\n    direction: rawDirection,\r\n    getContextMenuItems,\r\n    // ARIA\r\n    \"aria-label\": ariaLabel,\r\n    \"aria-labelledby\": ariaLabelledBy,\r\n    \"aria-describedby\": ariaDescribedBy,\r\n    \"data-testid\": testId,\r\n    columnReordering,\r\n    pagination: tablePagination,\r\n    paginationPageSize,\r\n    suppressPaginationPanel,\r\n    paginationAutoPageSize,\r\n    defaultPage,\r\n    frameworkComponents,\r\n    onGridReady,\r\n    ...rest\r\n  } = props;\r\n\r\n  /**\r\n   * defaults\r\n   */\r\n\r\n  const [selectedRows1, onSelectedRowsChange1] = useState();\r\n  selectedRows = selectedRows ? selectedRows : [];\r\n  const selection = rest.selection && SelectColumn;\r\n  raawColumns = rest.selection ? [selection, ...raawColumns] : raawColumns;\r\n\r\n  // const enableColumnSort = raawColumns\r\n  //   ?.map((i) => i.sortable === true)\r\n  //   .includes(true);\r\n\r\n  const enableFilter = raawColumns\r\n    ?.map((i) => i?.filter === true)\r\n    .includes(true);\r\n  const contextMenuItems =\r\n    getContextMenuItems !== undefined ? getContextMenuItems() : [];\r\n  function contextMenuRowRenderer(key, props) {\r\n    return (\r\n      <ContextMenuTrigger\r\n        key={key}\r\n        id=\"grid-context-menu\"\r\n        collect={() => ({ rowIdx: props.rowIdx })}\r\n      >\r\n        <RowComponent {...props} />\r\n      </ContextMenuTrigger>\r\n    );\r\n  }\r\n\r\n  const [headerHeightFromRef, setHeaderHeightFromRef] = useState();\r\n  const defaultComponents = useDefaultComponents();\r\n  const rowHeight = rawRowHeight ?? 24;\r\n  const headerWithFilter = enableFilter ? 70 : undefined;\r\n  const headerRowHeight =\r\n    headerHeightFromRef ??\r\n    rawHeaderRowHeight ??\r\n    headerWithFilter ??\r\n    (typeof rowHeight === \"number\" ? rowHeight : 24);\r\n  const summaryRowHeight =\r\n    rawSummaryRowHeight ?? (typeof rowHeight === \"number\" ? rowHeight : 24);\r\n  const rowRenderer =\r\n    contextMenuItems.length > 0\r\n      ? contextMenuRowRenderer\r\n      : renderers?.rowRenderer ??\r\n        defaultComponents?.rowRenderer ??\r\n        defaultRowRenderer;\r\n  const sortStatus =\r\n    renderers?.sortStatus ?? defaultComponents?.sortStatus ?? defaultSortStatus;\r\n  const checkboxFormatter =\r\n    renderers?.checkboxFormatter ??\r\n    defaultComponents?.checkboxFormatter ??\r\n    defaultCheckboxFormatter;\r\n  const noRowsFallback =\r\n    renderers?.noRowsFallback ?? defaultComponents?.noRowsFallback;\r\n  const cellNavigationMode = rawCellNavigationMode ?? \"NONE\";\r\n  const enableVirtualization = rawEnableVirtualization ?? true;\r\n  const direction = rawDirection ?? \"ltr\";\r\n\r\n  /**\r\n   * states\r\n   */\r\n  const [afterFilter, setAfterFilter] = useState([]);\r\n\r\n  const [defaultColumnDef, setDefaultColumnDef] =\r\n    useState(defaultColumnOptions);\r\n  const [rawGroupBy, setRawGroupBy] = useState(raawGroupBy);\r\n  const [expandAll, setExpandAll] = useState(null);\r\n  useEffect(() => {\r\n    setExpandAll(null);\r\n  }, [raawGroupBy, expandedGroupIds]);\r\n  useEffect(() => {\r\n    setRawGroupBy(raawGroupBy);\r\n  }, [raawGroupBy]);\r\n  const [scrollTop, setScrollTop] = useState(0);\r\n  const [scrollLeft, setScrollLeft] = useState(0);\r\n  const [columnWidths, setColumnWidths] = useState(() => new Map());\r\n  const [selectedPosition, setSelectedPosition] = useState(initialPosition);\r\n  const [copiedCell, setCopiedCell] = useState(null);\r\n  const [isDragging, setDragging] = useState(false);\r\n  const [draggedOverRowIdx, setOverRowIdx] = useState(undefined);\r\n  const [sortColumns, setSortColumns] = useState([]);\r\n  const [rawRows, setRawRows] = useState(raawRows);\r\n  const [rawColumns, setRawColumns] = useState(\r\n    serialNumber ? [SerialNumberColumn, ...raawColumns] : raawColumns\r\n  );\r\n\r\n  const [pagination, setPagination] = useState(tablePagination);\r\n  const [suppressPagination, setSuppressPagination] = useState(\r\n    suppressPaginationPanel ?? false\r\n  );\r\n  const [size, setSize] = useState(paginationPageSize ?? 20);\r\n  const [current, setCurrent] = useState(defaultPage ?? 1);\r\n\r\n  const PaginationChange = (page, pageSize) => {\r\n    setCurrent(page);\r\n    setSize(pageSize);\r\n  };\r\n  const PrevNextArrow = (current, type, originalElement) => {\r\n    if (type === \"prev\") {\r\n      return (\r\n        <button title=\"Previous\">\r\n          <i className=\"fa fa-angle-double-left\" />\r\n        </button>\r\n      );\r\n    }\r\n    if (type === \"next\") {\r\n      return (\r\n        <button title=\"Next\">\r\n          <i className=\"fa fa-angle-double-right\" />\r\n        </button>\r\n      );\r\n    }\r\n    return originalElement;\r\n  };\r\n  const PerPageChange = (value) => {\r\n    setSize(value);\r\n    const newPerPage = Math.ceil(rawRows.length / value);\r\n    if (current > newPerPage) {\r\n      setCurrent(newPerPage);\r\n    }\r\n  };\r\n  const onSortColumnsChange = (sortColumns) => {\r\n    setSortColumns(sortColumns.slice(-1));\r\n  };\r\n  var defaultFilters = {};\r\n  raawColumns.forEach((rawCol) => {\r\n    if (rawCol.filter) defaultFilters[rawCol.field] = \"\";\r\n  });\r\n\r\n  const [filters, setFilters] = useState({ ...defaultFilters, enabled: true });\r\n\r\n  let filterFunction = useCallback(\r\n    (props) => {\r\n      return raawRows?.filter(function (val) {\r\n        for (var i = 0; i < props.length; i++)\r\n          if (!val[props[i][0]].includes(props[i][1])) return false;\r\n        return true;\r\n      });\r\n    },\r\n    [raawRows]\r\n  );\r\n\r\n  const sortedRows = useMemo(() => {\r\n    const asArray = Object.entries(filters);\r\n    const keys = asArray.filter(([key, value]) => value.length > 0);\r\n    const filteredRows = filterFunction(keys);\r\n    if (sortColumns.length === 0) return filteredRows;\r\n    const { columnKey, direction } = sortColumns[0];\r\n    let sortedRows = filteredRows;\r\n    sortedRows = sortedRows.sort((a, b) =>\r\n      typeof a[columnKey] === \"number\"\r\n        ? a[columnKey] - b[columnKey]\r\n        : a[columnKey].localeCompare(b[columnKey])\r\n    );\r\n    return direction === \"DESC\" ? sortedRows.reverse() : sortedRows;\r\n  }, [sortColumns, filters, filterFunction]);\r\n\r\n  useEffect(() => {\r\n    return setRawRows(sortedRows);\r\n  }, [sortedRows]);\r\n\r\n  const handleReorderColumn = (value) => {\r\n    if (columnReordering) {\r\n      setRawColumns(value);\r\n    }\r\n  };\r\n\r\n  const handleReorderRow = (value) => setRawRows(value);\r\n\r\n  //Adding a serial number column if serialNumber prop is passed\r\n  raawColumns = serialNumber\r\n    ? [SerialNumberColumn, ...raawColumns]\r\n    : raawColumns;\r\n  /**\r\n   * refs\r\n   */\r\n  const prevSelectedPosition = useRef(selectedPosition);\r\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\r\n  const lastSelectedRowIdx = useRef(-1);\r\n  const rowRef = useRef(null);\r\n\r\n  /**\r\n   * computed values\r\n   */\r\n  const [gridRef, gridWidth, gridHeight, isWidthInitialized] =\r\n    useGridDimensions();\r\n  const headerRowsCount = 1;\r\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\r\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\r\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\r\n  const clientHeight =\r\n    gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\r\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\r\n  const isRtl = direction === \"rtl\";\r\n  const leftKey = isRtl ? \"ArrowRight\" : \"ArrowLeft\";\r\n  const rightKey = isRtl ? \"ArrowLeft\" : \"ArrowRight\";\r\n\r\n  const defaultGridComponents = useMemo(\r\n    () => ({\r\n      sortStatus,\r\n      checkboxFormatter,\r\n    }),\r\n    [sortStatus, checkboxFormatter]\r\n  );\r\n\r\n  const allRowsSelected = useMemo(() => {\r\n    // no rows to select = explicitely unchecked\r\n    const { length } = rawRows;\r\n    return (\r\n      length !== 0 &&\r\n      selectedRows1 != null &&\r\n      rowKeyGetter != null &&\r\n      selectedRows1.size >= length &&\r\n      rawRows.every((row) => selectedRows1.has(rowKeyGetter(row)))\r\n    );\r\n  }, [rawRows, selectedRows1, rowKeyGetter]);\r\n  let {\r\n    columns,\r\n    colSpanColumns,\r\n    colOverscanStartIdx,\r\n    colOverscanEndIdx,\r\n    templateColumns,\r\n    layoutCssVars,\r\n    columnMetrics,\r\n    lastFrozenColumnIndex,\r\n    totalFrozenColumnWidth,\r\n    groupBy,\r\n  } = useCalculatedColumns({\r\n    rawColumns,\r\n    columnWidths,\r\n    scrollLeft,\r\n    viewportWidth: gridWidth,\r\n    defaultColumnDef,\r\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\r\n    enableVirtualization,\r\n    frameworkComponents,\r\n  });\r\n\r\n  const {\r\n    rowOverscanStartIdx,\r\n    rowOverscanEndIdx,\r\n    rows,\r\n    rowsCount,\r\n    totalRowHeight,\r\n    gridTemplateRows,\r\n    isGroupRow,\r\n    getRowTop,\r\n    getRowHeight,\r\n    findRowIdx,\r\n  } = useViewportRows({\r\n    rawRows,\r\n    groupBy,\r\n    rowGrouper,\r\n    expandAll,\r\n    rowHeight,\r\n    clientHeight,\r\n    scrollTop,\r\n    expandedGroupIds,\r\n    enableVirtualization,\r\n    paginationPageSize: size,\r\n    current,\r\n    pagination,\r\n  });\r\n\r\n  const { viewportColumns, flexWidthViewportColumns } = useViewportColumns({\r\n    columns,\r\n    colSpanColumns,\r\n    colOverscanStartIdx,\r\n    colOverscanEndIdx,\r\n    lastFrozenColumnIndex,\r\n    rowOverscanStartIdx,\r\n    rowOverscanEndIdx,\r\n    rows,\r\n    topSummaryRows,\r\n    bottomSummaryRows,\r\n    columnWidths,\r\n    isGroupRow,\r\n  });\r\n\r\n  //column Api\r\n  function getColumnWidths() {\r\n    let keys = Array.from(columnMetrics.keys());\r\n    let columnKeys = [];\r\n    keys.map((key) => columnKeys.push(key.key));\r\n    let values = Array.from(columnMetrics.values());\r\n    let columnWidthValues = [];\r\n    values.map((value) => columnWidthValues.push(value.width));\r\n    let columnWidth = new Map(columnWidths);\r\n    for (let i = 0; i < columnWidthValues.length; i++) {\r\n      columnWidth.set(columnKeys[i], columnWidthValues[i]);\r\n    }\r\n    return columnWidth;\r\n  }\r\n  function getColumns() {\r\n    let columnObjects = [];\r\n    columns.forEach((column) => {\r\n      const index = raawColumns.findIndex((c) => c.field === column.field);\r\n      const userColDef = raawColumns[index];\r\n      const indexOfRowGroup = rawGroupBy?.findIndex(\r\n        (key) => key === `${column.key}`\r\n      );\r\n      const indexOfSort = sortColumns.findIndex(\r\n        (sortCol) => sortCol.columnKey === `${column.key}`\r\n      );\r\n      const sort = indexOfSort > -1 ? sortColumns[indexOfSort].direction : null;\r\n      const columnState = {\r\n        colId: column.field ?? `${column.key}` ?? `col_${column.idx}`,\r\n        columnIndex: column.idx,\r\n        width: templateColumns[column.idx],\r\n        frozen: column.frozen ?? undefined,\r\n        rowGroup: column.rowGroup ?? undefined,\r\n        rowGroupIndex: indexOfRowGroup > -1 ? indexOfRowGroup : null,\r\n        sort: sort,\r\n        userProvidedColDef: userColDef,\r\n      };\r\n      columnObjects.push(columnState);\r\n      column.children?.forEach((colChild) => {\r\n        const columnState = {\r\n          colId: colChild.field ?? colChild.key ?? `col_${column.idx}`,\r\n          columnIndex: column.idx,\r\n          width: colChild.width,\r\n          frozen: colChild.frozen ?? undefined,\r\n          rowGroup: colChild.rowGroup ?? undefined,\r\n          userProvidedColDef: userColDef,\r\n        };\r\n        columnObjects.push(columnState);\r\n      });\r\n    });\r\n    return columnObjects;\r\n  }\r\n  function moveColumn(colKey, toIndex) {\r\n    const key = typeof colKey === \"string\" ? colKey : colKey.colId;\r\n    const sourceColumnIndex = columns.findIndex((c) => c.field === key);\r\n    const targetColumnIndex =\r\n      toIndex < columns.length ? toIndex : sourceColumnIndex;\r\n    const reorderedColumns = [...columns];\r\n    reorderedColumns.splice(\r\n      targetColumnIndex,\r\n      0,\r\n      reorderedColumns.splice(sourceColumnIndex, 1)[0]\r\n    );\r\n    setRawColumns(reorderedColumns);\r\n  }\r\n  function moveColumns(columnsToMove, toIndex) {\r\n    let sourceColumns = [];\r\n    const reorderedColumns = [...columns];\r\n    columns.map((c) =>\r\n      columnsToMove.forEach((col) => {\r\n        const key = typeof col === \"string\" ? col : col.colId;\r\n        if (key === c.field) sourceColumns.push(c);\r\n      })\r\n    );\r\n    let valueAtPosition = columns[toIndex];\r\n    sourceColumns.forEach((v) =>\r\n      reorderedColumns.splice(reorderedColumns.indexOf(v), 1)\r\n    );\r\n    reorderedColumns.splice(\r\n      reorderedColumns.indexOf(valueAtPosition) + 1,\r\n      0,\r\n      ...sourceColumns\r\n    );\r\n    setRawColumns(reorderedColumns);\r\n  }\r\n  function moveColumnByIndex(fromIndex, toIndex) {\r\n    const sourceColumnIndex = fromIndex;\r\n    const targetColumnIndex =\r\n      toIndex < columns.length ? toIndex : sourceColumnIndex;\r\n    const reorderedColumns = [...columns];\r\n    reorderedColumns.splice(\r\n      targetColumnIndex,\r\n      0,\r\n      reorderedColumns.splice(sourceColumnIndex, 1)[0]\r\n    );\r\n    setRawColumns(reorderedColumns);\r\n  }\r\n  function getDisplayNameForColumn(column, location) {\r\n    let displayNameForCol;\r\n    columns.forEach((col) => {\r\n      if (column.colId === col.key && location === col.idx)\r\n        displayNameForCol = col.headerName;\r\n    });\r\n    return displayNameForCol;\r\n  }\r\n  function getDisplayedColAfter(column) {\r\n    let columnObjects = getColumns();\r\n    let displayedColAfterKey;\r\n    for (let index = 0; index < columns.length; index++) {\r\n      let col = columns[index];\r\n      let nextCol = columns[index + 1];\r\n      if (column.colId === col.key)\r\n        displayedColAfterKey = nextCol.parentColumn\r\n          ? nextCol.parentColumn.key || nextCol.parentColumn.field\r\n          : nextCol.key;\r\n    }\r\n    let displayedColAfter;\r\n    columnObjects.forEach((colObj) => {\r\n      if (colObj.colId === displayedColAfterKey) displayedColAfter = colObj;\r\n    });\r\n    return displayedColAfter;\r\n  }\r\n  function getDisplayedColBefore(column) {\r\n    let columnObjects = getColumns();\r\n    let displayedColBeforeKey;\r\n    for (let index = 0; index < columns.length; index++) {\r\n      let col = columns[index];\r\n      let prevCol = columns[index - 1];\r\n      if (column.colId === col.key)\r\n        displayedColBeforeKey = prevCol.parentColumn\r\n          ? prevCol.parentColumn.key || prevCol.parentColumn.field\r\n          : prevCol.key;\r\n    }\r\n    let displayedColBefore;\r\n    columnObjects.forEach((colObj) => {\r\n      if (colObj.colId === displayedColBeforeKey) displayedColBefore = colObj;\r\n    });\r\n    return displayedColBefore;\r\n  }\r\n  function getRowGroupColumns() {\r\n    let columnObjects = getColumns();\r\n    let rowGroupColumns = [];\r\n    columnObjects.forEach((colObject) => {\r\n      if (rawGroupBy?.includes(colObject.colId))\r\n        rowGroupColumns.push(colObject);\r\n    });\r\n    return rowGroupColumns;\r\n  }\r\n  function setRowGroupColumns(colKeys) {\r\n    rawGroupBy.length = 0;\r\n    colKeys.forEach((colKey) => {\r\n      typeof colKey === \"string\"\r\n        ? rawGroupBy.push(colKey)\r\n        : rawGroupBy.push(colKey.colId);\r\n    });\r\n    setRawColumns(raawColumns);\r\n  }\r\n  function addRowGroupColumn(colKey) {\r\n    typeof colKey === \"string\"\r\n      ? rawGroupBy.push(colKey)\r\n      : rawGroupBy.push(colKey.colId);\r\n    setRawColumns(raawColumns);\r\n  }\r\n  function addRowGroupColumns(colKeys) {\r\n    colKeys.forEach((colKey) => {\r\n      typeof colKey === \"string\"\r\n        ? rawGroupBy.push(colKey)\r\n        : rawGroupBy.push(colKey.colId);\r\n    });\r\n    setRawColumns(raawColumns);\r\n  }\r\n  function removeRowGroupColumn(colKey) {\r\n    const key = typeof colKey === \"string\" ? colKey : colKey.colId;\r\n    const indexOfKey = rawGroupBy?.findIndex((c) => c === key);\r\n    if (indexOfKey > -1) rawGroupBy?.splice(indexOfKey, 1);\r\n    setRawColumns(raawColumns);\r\n  }\r\n  function removeRowGroupColumns(colKeys) {\r\n    colKeys.forEach((colKey) => {\r\n      const key = typeof colKey === \"string\" ? colKey : colKey.colId;\r\n      const indexOfKey = rawGroupBy?.findIndex((c) => c === key);\r\n      if (indexOfKey > -1) rawGroupBy?.splice(indexOfKey, 1);\r\n    });\r\n    setRawColumns(raawColumns);\r\n  }\r\n  function moveRowGroupColumn(fromIndex, toIndex) {\r\n    if (fromIndex > -1 && toIndex < rawGroupBy?.length) {\r\n      var element = rawGroupBy[fromIndex];\r\n      rawGroupBy.splice(fromIndex, 1);\r\n      rawGroupBy.splice(toIndex, 0, element);\r\n      setRawColumns(columns);\r\n    }\r\n  }\r\n  function setColumnWidth(key, newWidth) {\r\n    const colKey = typeof key === \"string\" ? key : key.colId;\r\n    const newColumnWidths = new Map(columnWidths);\r\n    newColumnWidths.set(colKey, newWidth);\r\n    setColumnWidths(newColumnWidths);\r\n  }\r\n  function setColumnsWidth(newColumnWidths) {\r\n    const newColWidths = new Map(columnWidths);\r\n    newColumnWidths.forEach((col) => {\r\n      const colKey = typeof col.key === \"string\" ? col.key : col.key.colId;\r\n      const colWidth = col.newWidth;\r\n      newColWidths.set(colKey, colWidth);\r\n    });\r\n    setColumnWidths(newColWidths);\r\n  }\r\n  function autoSizeColumn(key) {\r\n    const colKey = typeof key === \"string\" ? key : key.colId;\r\n    const columnIndex = columns.findIndex((col) => col.key === colKey);\r\n    const column = columns[columnIndex];\r\n    handleColumnResize(column, \"max-content\");\r\n  }\r\n  function autoSizeColumns(colKeys) {\r\n    let columnObjects = getColumns();\r\n    const { style } = gridRef.current;\r\n    const newTemplateColumns = [...templateColumns];\r\n    const newColumnWidths = new Map(columnWidths);\r\n    colKeys.forEach((colKey) => {\r\n      const key = typeof colKey === \"string\" ? colKey : colKey.colId;\r\n      const index = columnObjects.findIndex((c) => c.colId === key);\r\n      newTemplateColumns[index] = \"max-content\";\r\n      style.gridTemplateColumns = newTemplateColumns.join(\" \");\r\n      const measuringCell = gridRef.current.querySelector(\r\n        `[data-measuring-cell-key=\"${columns[index].key}\"]`\r\n      );\r\n      const measuredWidth = measuringCell.getBoundingClientRect().width;\r\n      const measuredWidthPx = `${measuredWidth}px`;\r\n      if (newTemplateColumns[columns[index].idx] !== measuredWidthPx) {\r\n        newTemplateColumns[columns[index].idx] = measuredWidthPx;\r\n        style.gridTemplateColumns = newTemplateColumns.join(\" \");\r\n      }\r\n      if (columnWidths.get(columns[index].key) === measuredWidth) return;\r\n      newColumnWidths.set(columns[index].key, measuredWidth);\r\n    });\r\n    setColumnWidths(newColumnWidths);\r\n    templateColumns = [...newTemplateColumns];\r\n  }\r\n  function autoSizeAllColumns() {\r\n    const { style } = gridRef.current;\r\n    const newTemplateColumns = [...templateColumns];\r\n    const newColumnWidths = new Map(columnWidths);\r\n    for (let index = 0; index < newTemplateColumns.length; index++) {\r\n      newTemplateColumns[index] = \"max-content\";\r\n      style.gridTemplateColumns = newTemplateColumns.join(\" \");\r\n      const measuringCell = gridRef.current.querySelector(\r\n        `[data-measuring-cell-key=\"${columns[index].key}\"]`\r\n      );\r\n      const measuredWidth = measuringCell.getBoundingClientRect().width;\r\n      const measuredWidthPx = `${measuredWidth}px`;\r\n      if (newTemplateColumns[columns[index].idx] !== measuredWidthPx) {\r\n        newTemplateColumns[columns[index].idx] = measuredWidthPx;\r\n        style.gridTemplateColumns = newTemplateColumns.join(\" \");\r\n      }\r\n      if (columnWidths.get(columns[index].key) === measuredWidth) return;\r\n      newColumnWidths.set(columns[index].key, measuredWidth);\r\n    }\r\n    setColumnWidths(newColumnWidths);\r\n    templateColumns = [...newTemplateColumns];\r\n  }\r\n  function sizeColumnsToFit(gridWidth) {\r\n    let columnWidths = getColumnWidths();\r\n    let widthSum = 0;\r\n    let colWidthValues = Array.from(columnWidths.values());\r\n    colWidthValues.forEach((colWidth) => {\r\n      widthSum += colWidth;\r\n    });\r\n    var scale = gridWidth / widthSum;\r\n    const newColWidths = new Map(columnWidths);\r\n    let colWidths = Array.from(columnWidths.keys());\r\n    let sum = 0;\r\n    for (let index = 0; index < colWidthValues.length; index++) {\r\n      if (index === colWidthValues.length - 1) {\r\n        let width = gridWidth - sum;\r\n        newColWidths.set(colWidths[index], width);\r\n      } else {\r\n        let width = Math.round(colWidthValues[index] * scale);\r\n        newColWidths.set(colWidths[index], width);\r\n        sum += width;\r\n      }\r\n    }\r\n    setColumnWidths(newColWidths);\r\n  }\r\n  function getColumnState() {\r\n    var columns = Array.from(columnMetrics.keys());\r\n    var colStates = [];\r\n    columns.forEach((col) => {\r\n      const index = sortColumns.findIndex(\r\n        (sortCol) => sortCol.columnKey === col.key\r\n      );\r\n      const sort = index > -1 ? sortColumns[index].direction : null;\r\n      const indexOfRowGroup = rawGroupBy?.findIndex((key) => key === col.key);\r\n      const colState = {\r\n        colId: col.key ?? `col_${col.idx}`,\r\n        columnIndex: col.idx,\r\n        frozen: col.frozen ?? undefined,\r\n        width: templateColumns[col.idx],\r\n        rowGroup: col.rowGroup ?? undefined,\r\n        rowGroupIndex: indexOfRowGroup > -1 ? indexOfRowGroup : null,\r\n        sort: sort,\r\n      };\r\n      colStates.push(colState);\r\n    });\r\n    return colStates;\r\n  }\r\n  function applyColumnState(columnState) {\r\n    const colState = columnState.state;\r\n    const defaultState = columnState.defaultState ?? undefined;\r\n    const newColWidths = new Map(columnWidths);\r\n    colState.forEach((col) => {\r\n      const colKey = col.colId;\r\n      if (col.frozen) {\r\n        const index = columns.findIndex((c) => c.key === colKey);\r\n        columns[index].frozen = col.frozen;\r\n      }\r\n      if (col.width !== undefined) {\r\n        let width = isString(col.width)\r\n          ? Number(col.width.match(/\\d+/)[0])\r\n          : col.width;\r\n        newColWidths.set(colKey, width);\r\n      }\r\n      if (col.rowGroup !== undefined) {\r\n        if (col.rowGroup) {\r\n          const index = columns.findIndex((c) => c.key === colKey);\r\n          columns[index].rowGroup = col.rowGroup;\r\n          addRowGroupColumn(colKey);\r\n        } else {\r\n          const index = columns.findIndex((c) => c.key === colKey);\r\n          columns[index].rowGroup = col.rowGroup;\r\n          removeRowGroupColumn(colKey);\r\n        }\r\n      }\r\n      if (col.rowGroupIndex !== undefined) {\r\n        if (col.rowGroupIndex !== null && col.rowGroup) {\r\n          const fromIndex = rawGroupBy.findIndex(\r\n            (groupCol) => groupCol === colKey\r\n          );\r\n          const toIndex = col.rowGroupIndex;\r\n          if (fromIndex > -1 && toIndex < rawGroupBy?.length)\r\n            moveRowGroupColumn(fromIndex, toIndex);\r\n        }\r\n      }\r\n      if (col.sort !== undefined) {\r\n        if (col.sort !== null) {\r\n          const index = sortColumns.findIndex(\r\n            (sortCol) => sortCol.columnKey === colKey\r\n          );\r\n          if (index === -1)\r\n            sortColumns.push({ columnKey: colKey, direction: col.sort });\r\n          if (index > -1 && sortColumns[index].direction !== col.sort)\r\n            sortColumns[index].direction = col.sort;\r\n          onSortColumnsChange(sortColumns);\r\n        } else {\r\n          const index = sortColumns.findIndex(\r\n            (sortCol) => sortCol.columnKey === colKey\r\n          );\r\n          if (index > -1) sortColumns.splice(index, 1);\r\n          onSortColumnsChange(sortColumns);\r\n        }\r\n      }\r\n      setColumnWidths(newColWidths);\r\n    });\r\n    if (defaultState) {\r\n      let keysOfColumns = [];\r\n      colState.map((col) => keysOfColumns.push(col.colId));\r\n      columns.forEach((column) => {\r\n        if (!keysOfColumns.includes(column.key)) {\r\n          if (defaultState.frozen !== undefined)\r\n            column.frozen = defaultState.frozen;\r\n          if (defaultState.width !== undefined) {\r\n            newColWidths.set(column.key, defaultState.width);\r\n          }\r\n          if (defaultState.rowGroup !== undefined) {\r\n            if (defaultState.rowGroup) {\r\n              const index = columns.findIndex((c) => c.key === column.key);\r\n              columns[index].rowGroup = defaultState.rowGroup;\r\n              addRowGroupColumn(column.key);\r\n            } else {\r\n              const index = columns.findIndex((c) => c.key === column.key);\r\n              columns[index].rowGroup = defaultState.rowGroup;\r\n              removeRowGroupColumn(column.key);\r\n            }\r\n          }\r\n          if (defaultState.sort !== undefined) {\r\n            if (defaultState.sort !== null) {\r\n              const index = sortColumns.findIndex(\r\n                (sortCol) => sortCol.columnKey === `${column.key}`\r\n              );\r\n              if (index === -1)\r\n                sortColumns.push({\r\n                  columnKey: `${column.key}`,\r\n                  direction: defaultState.sort,\r\n                });\r\n              if (\r\n                index > -1 &&\r\n                sortColumns[index].direction !== defaultState.sort\r\n              )\r\n                sortColumns[index].direction = defaultState.sort;\r\n              onSortColumnsChange(sortColumns);\r\n            } else {\r\n              const index = sortColumns.findIndex(\r\n                (sortCol) => sortCol.columnKey === `${column.key}`\r\n              );\r\n              if (index > -1) sortColumns.splice(index, 1);\r\n              onSortColumnsChange(sortColumns);\r\n            }\r\n          }\r\n        }\r\n      });\r\n      setColumnWidths(newColWidths);\r\n    }\r\n    setRawColumns(columns);\r\n  }\r\n  function isPinning() {\r\n    let isPinning = false;\r\n    columns.forEach((col) => {\r\n      if (col.frozen === true) isPinning = true;\r\n    });\r\n    return isPinning;\r\n  }\r\n  function setColumnPinned(key) {\r\n    const colKey = typeof key === \"string\" ? key : key.colId;\r\n    const columnIndex = columns.findIndex((col) => col.key === colKey);\r\n    columns[columnIndex].frozen = true;\r\n    setRawColumns(columns);\r\n  }\r\n  function setColumnsPinned(keys) {\r\n    for (let i = 0; i < columns.length; i++) {\r\n      for (let j = 0; j < keys.length; j++) {\r\n        const key = typeof keys[j] === \"string\" ? keys[j] : keys[j].colId;\r\n        const columnIndex = columns.findIndex((col) => col.key === key);\r\n        if (i === columnIndex) columns[i].frozen = true;\r\n      }\r\n    }\r\n    setRawColumns(columns);\r\n  }\r\n  function getSortColumns() {\r\n    let columnObjects = getColumns();\r\n    let sortColumns = [];\r\n    columnObjects.forEach((colObj) => {\r\n      if (colObj.sort !== null) sortColumns.push(colObj);\r\n    });\r\n    return sortColumns;\r\n  }\r\n  var columnApiObject = {\r\n    columnModel: {\r\n      columnDefs: raawColumns,\r\n      rowGroupColumns: getRowGroupColumns(),\r\n      sortColumns: getSortColumns(),\r\n    },\r\n  };\r\n  Object.setPrototypeOf(columnApiObject, {\r\n    // get columns\r\n    getColumns,\r\n    getColumn: (colKey) => {\r\n      let columnObjects = getColumns();\r\n      let colObject;\r\n      let key = typeof colKey === \"string\" ? colKey : colKey.colId;\r\n      columnObjects.forEach((columnObj) => {\r\n        if (columnObj.colId === key) colObject = columnObj;\r\n      });\r\n      return colObject;\r\n    },\r\n    getAllGridColumns: () => getColumns(),\r\n    //move columns\r\n    moveColumn,\r\n    moveColumns,\r\n    moveColumnByIndex,\r\n    //display names for column / column groups\r\n    getDisplayNameForColumn,\r\n    getDisplayedColAfter,\r\n    getDisplayedColBefore,\r\n    getAllDisplayedVirtualColumns: () => viewportColumns,\r\n    getAllDisplayedColumns: () => viewportColumns,\r\n    //row group columns\r\n    getRowGroupColumns,\r\n    setRowGroupColumns,\r\n    addRowGroupColumn,\r\n    addRowGroupColumns,\r\n    removeRowGroupColumn,\r\n    removeRowGroupColumns,\r\n    moveRowGroupColumn,\r\n    //column widths\r\n    setColumnWidth,\r\n    setColumnsWidth,\r\n    autoSizeColumn,\r\n    autoSizeColumns,\r\n    autoSizeAllColumns,\r\n    sizeColumnsToFit,\r\n    //column states\r\n    getColumnState,\r\n    applyColumnState,\r\n    resetColumnState: () => {\r\n      // // groupBy = [...rawGroupBy];\r\n      if (rawGroupBy?.length > 0) rawGroupBy.length = 0;\r\n      if (sortColumns?.length > 0) {\r\n        sortColumns.length = 0;\r\n        onSortColumnsChange(sortColumns);\r\n      }\r\n      setRawColumns(raawColumns);\r\n    },\r\n    //pinning columns\r\n    isPinning,\r\n    setColumnPinned,\r\n    setColumnsPinned,\r\n  });\r\n\r\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === \"function\";\r\n  const minColIdx = hasGroups ? -1 : 0;\r\n  const maxColIdx = columns.length - 1;\r\n  const minRowIdx = -1 - topSummaryRowsCount;\r\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\r\n  const selectedCellIsWithinSelectionBounds =\r\n    isCellWithinSelectionBounds(selectedPosition);\r\n  const selectedCellIsWithinViewportBounds =\r\n    isCellWithinViewportBounds(selectedPosition);\r\n\r\n  /**\r\n   * The identity of the wrapper function is stable so it won't break memoization\r\n   */\r\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\r\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\r\n  const onCellClickLatest = useLatestFunc(onCellClick);\r\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\r\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\r\n  const selectRowLatest = useLatestFunc(selectRow);\r\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\r\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\r\n  const selectViewportCellLatest = useLatestFunc(\r\n    (row, column, enableEditor) => {\r\n      const rowIdx = rows.indexOf(row);\r\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\r\n    }\r\n  );\r\n  const selectGroupLatest = useLatestFunc((rowIdx) => {\r\n    selectCell({ rowIdx, idx: -1 });\r\n  });\r\n  const selectHeaderCellLatest = useLatestFunc((idx) => {\r\n    selectCell({ rowIdx: minRowIdx, idx });\r\n  });\r\n  const selectTopSummaryCellLatest = useLatestFunc((summaryRow, column) => {\r\n    const rowIdx = topSummaryRows.indexOf(summaryRow);\r\n    selectCell({ rowIdx: rowIdx + minRowIdx + 1, idx: column.idx });\r\n  });\r\n  const selectBottomSummaryCellLatest = useLatestFunc((summaryRow, column) => {\r\n    const rowIdx = bottomSummaryRows.indexOf(summaryRow) + rows.length;\r\n    selectCell({ rowIdx, idx: column.idx });\r\n  });\r\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\r\n\r\n  /**\r\n   * effects\r\n   */\r\n  useLayoutEffect(() => {\r\n    if (\r\n      !selectedCellIsWithinSelectionBounds ||\r\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\r\n    ) {\r\n      prevSelectedPosition.current = selectedPosition;\r\n      return;\r\n    }\r\n\r\n    prevSelectedPosition.current = selectedPosition;\r\n\r\n    if (selectedPosition.idx === -1) {\r\n      rowRef.current.focus({ preventScroll: true });\r\n      scrollIntoView(rowRef.current);\r\n    }\r\n  });\r\n\r\n  useLayoutEffect(() => {\r\n    if (!isWidthInitialized || flexWidthViewportColumns.length === 0) return;\r\n\r\n    setColumnWidths((columnWidths) => {\r\n      const newColumnWidths = new Map(columnWidths);\r\n      const grid = gridRef.current;\r\n\r\n      for (const column of flexWidthViewportColumns) {\r\n        const measuringCell = grid.querySelector(\r\n          `[data-measuring-cell-key=\"${column.key}\"]`\r\n        );\r\n        // Set the actual width of the column after it is rendered\r\n        const { width } = measuringCell.getBoundingClientRect();\r\n        newColumnWidths.set(column.key, width);\r\n      }\r\n\r\n      return newColumnWidths;\r\n    });\r\n  }, [isWidthInitialized, flexWidthViewportColumns, gridRef]);\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    element: gridRef.current,\r\n    scrollToColumn,\r\n    scrollToRow(rowIdx) {\r\n      const { current } = gridRef;\r\n      if (!current) return;\r\n      current.scrollTo({\r\n        top: getRowTop(rowIdx),\r\n        behavior: \"smooth\",\r\n      });\r\n    },\r\n    selectCell,\r\n    api: apiObject,\r\n    columnApi: columnApiObject,\r\n    node,\r\n  }));\r\n\r\n  /**\r\n   * callbacks\r\n   */\r\n  const setDraggedOverRowIdx = useCallback((rowIdx) => {\r\n    setOverRowIdx(rowIdx);\r\n    latestDraggedOverRowIdx.current = rowIdx;\r\n  }, []);\r\n\r\n  /**\r\n   * event handlers\r\n   */\r\n  function handleColumnResize(column, width) {\r\n    const { style } = gridRef.current;\r\n    const newTemplateColumns = [...templateColumns];\r\n    newTemplateColumns[column.idx] =\r\n      width === \"max-content\" ? width : `${width}px`;\r\n    style.gridTemplateColumns = newTemplateColumns.join(\" \");\r\n\r\n    const measuringCell = gridRef.current.querySelector(\r\n      `[data-measuring-cell-key=\"${column.key}\"]`\r\n    );\r\n    const measuredWidth = measuringCell.getBoundingClientRect().width;\r\n    const measuredWidthPx = `${measuredWidth}px`;\r\n\r\n    // Immediately update `grid-template-columns` to prevent the column from jumping to its min/max allowed width.\r\n    // Only measuring cells have the min/max width set for proper colSpan support,\r\n    // which is why other cells may render at the previously set width, beyond the min/max.\r\n    // An alternative for the above would be to use flushSync.\r\n    // We also have to reset `max-content` so it doesn't remain stuck on `max-content`.\r\n    if (newTemplateColumns[column.idx] !== measuredWidthPx) {\r\n      newTemplateColumns[column.idx] = measuredWidthPx;\r\n      style.gridTemplateColumns = newTemplateColumns.join(\" \");\r\n    }\r\n\r\n    if (columnWidths.get(column.key) === measuredWidth) return;\r\n\r\n    const newColumnWidths = new Map(columnWidths);\r\n    newColumnWidths.set(column.key, measuredWidth);\r\n    setColumnWidths(newColumnWidths);\r\n\r\n    onColumnResize?.(column.idx, measuredWidth);\r\n  }\r\n\r\n  function selectRow({ row, checked, isShiftClick }) {\r\n    if (!onSelectedRowsChange1) return;\r\n\r\n    assertIsValidKeyGetter(rowKeyGetter);\r\n    const newSelectedRows = new Set(selectedRows1);\r\n    const newSelectedRows1 = selectedRows;\r\n    if (isGroupRow(row)) {\r\n      for (const childRow of row.childRows) {\r\n        const rowKey = rowKeyGetter(childRow);\r\n        if (checked) {\r\n          newSelectedRows.add(rowKey);\r\n          newSelectedRows1.push(childRow);\r\n        } else {\r\n          newSelectedRows.delete(rowKey);\r\n          newSelectedRows1.splice(newSelectedRows1.indexOf(row), 1);\r\n        }\r\n      }\r\n      onSelectedRowsChange1(newSelectedRows);\r\n      onSelectedRowsChange(newSelectedRows1);\r\n      return;\r\n    }\r\n\r\n    const rowKey = rowKeyGetter(row);\r\n    if (checked) {\r\n      newSelectedRows.add(rowKey);\r\n      newSelectedRows1.push(row);\r\n      const previousRowIdx = lastSelectedRowIdx.current;\r\n      const rowIdx = rows.indexOf(row);\r\n      lastSelectedRowIdx.current = rowIdx;\r\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\r\n        const step = sign(rowIdx - previousRowIdx);\r\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\r\n          const row = rows[i];\r\n          if (isGroupRow(row)) continue;\r\n          newSelectedRows.add(rowKeyGetter(row));\r\n          newSelectedRows1.push(row);\r\n        }\r\n      }\r\n    } else {\r\n      newSelectedRows.delete(rowKey);\r\n      newSelectedRows1.splice(newSelectedRows1.indexOf(row), 1);\r\n      lastSelectedRowIdx.current = -1;\r\n    }\r\n\r\n    onSelectedRowsChange1(newSelectedRows);\r\n    onSelectedRowsChange(newSelectedRows1);\r\n  }\r\n\r\n  function selectAllRows(checked) {\r\n    if (!onSelectedRowsChange1) return;\r\n    assertIsValidKeyGetter(rowKeyGetter);\r\n    const newSelectedRows = new Set(selectedRows1);\r\n    const newSelectedRows1 = selectedRows;\r\n    for (const row of rawRows) {\r\n      const rowKey = rowKeyGetter(row);\r\n      if (checked) {\r\n        newSelectedRows.add(rowKey);\r\n        if (!newSelectedRows1.includes(row)) newSelectedRows1.push(row);\r\n      } else {\r\n        newSelectedRows.delete(rowKey);\r\n        newSelectedRows1.splice(newSelectedRows1.indexOf(row), 1);\r\n      }\r\n    }\r\n    onSelectedRowsChange(newSelectedRows1);\r\n    onSelectedRowsChange1(newSelectedRows);\r\n  }\r\n\r\n  function toggleGroup(expandedGroupId) {\r\n    if (!onExpandedGroupIdsChange) return;\r\n    const newExpandedGroupIds = new Set(expandedGroupIds);\r\n    if (newExpandedGroupIds.has(expandedGroupId)) {\r\n      newExpandedGroupIds.delete(expandedGroupId);\r\n    } else {\r\n      newExpandedGroupIds.add(expandedGroupId);\r\n    }\r\n    onExpandedGroupIdsChange(newExpandedGroupIds);\r\n  }\r\n\r\n  function handleKeyDown(event) {\r\n    if (!(event.target instanceof Element)) return;\r\n    const isCellEvent = event.target.closest(\".rdg-cell\") !== null;\r\n    const isRowEvent = hasGroups && event.target === rowRef.current;\r\n    if (!(isCellEvent || isRowEvent)) return;\r\n\r\n    const { key, keyCode } = event;\r\n    const { rowIdx } = selectedPosition;\r\n\r\n    if (\r\n      selectedCellIsWithinViewportBounds &&\r\n      (onPaste != null || onCopy != null) &&\r\n      isCtrlKeyHeldDown(event) &&\r\n      !isGroupRow(rows[rowIdx]) &&\r\n      selectedPosition.mode === \"SELECT\"\r\n    ) {\r\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\r\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\r\n      const cKey = 67;\r\n      const vKey = 86;\r\n      if (keyCode === cKey) {\r\n        handleCopy();\r\n        return;\r\n      }\r\n      if (keyCode === vKey) {\r\n        handlePaste();\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\r\n      const row = rows[rowIdx];\r\n\r\n      if (\r\n        isGroupRow(row) &&\r\n        selectedPosition.idx === -1 &&\r\n        // Collapse the current group row if it is focused and is in expanded state\r\n        ((key === leftKey && row.isExpanded) ||\r\n          // Expand the current group row if it is focused and is in collapsed state\r\n          (key === rightKey && !row.isExpanded))\r\n      ) {\r\n        event.preventDefault(); // Prevents scrolling\r\n        toggleGroup(row.id);\r\n        return;\r\n      }\r\n    }\r\n\r\n    switch (event.key) {\r\n      case \"Escape\":\r\n        setCopiedCell(null);\r\n        return;\r\n      case \"ArrowUp\":\r\n      case \"ArrowDown\":\r\n      case \"ArrowLeft\":\r\n      case \"ArrowRight\":\r\n      case \"Tab\":\r\n      case \"Home\":\r\n      case \"End\":\r\n      case \"PageUp\":\r\n      case \"PageDown\":\r\n        navigate(event);\r\n        break;\r\n      default:\r\n        handleCellInput(event);\r\n        break;\r\n    }\r\n  }\r\n\r\n  function handleScroll(event) {\r\n    const { scrollTop, scrollLeft } = event.currentTarget;\r\n    flushSync(() => {\r\n      setScrollTop(scrollTop);\r\n      // scrollLeft is nagative when direction is rtl\r\n      setScrollLeft(abs(scrollLeft));\r\n    });\r\n    onScroll?.(event);\r\n  }\r\n\r\n  function getRawRowIdx(rowIdx) {\r\n    return hasGroups ? rawRows.indexOf(rows[rowIdx]) : rowIdx;\r\n  }\r\n\r\n  function updateRow(column, rowIdx, row) {\r\n    if (typeof onRowsChange !== \"function\") return;\r\n    const rawRowIdx = getRawRowIdx(rowIdx);\r\n    if (row === rawRows[rawRowIdx]) return;\r\n    const updatedRows = [...rawRows];\r\n    updatedRows[rawRowIdx] = row;\r\n    onRowsChange(updatedRows, {\r\n      indexes: [rawRowIdx],\r\n      column,\r\n    });\r\n  }\r\n\r\n  function commitEditorChanges() {\r\n    if (selectedPosition.mode !== \"EDIT\") return;\r\n    updateRow(\r\n      columns[selectedPosition.idx],\r\n      selectedPosition.rowIdx,\r\n      selectedPosition.row\r\n    );\r\n  }\r\n\r\n  function handleCopy() {\r\n    const { idx, rowIdx } = selectedPosition;\r\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\r\n    const sourceColumnKey = columns[idx].key;\r\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\r\n    onCopy?.({ sourceRow, sourceColumnKey });\r\n  }\r\n\r\n  function handlePaste() {\r\n    if (\r\n      !(onPaste && onRowsChange) ||\r\n      copiedCell === null ||\r\n      !isCellEditable(selectedPosition)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const { idx, rowIdx } = selectedPosition;\r\n    const targetColumn = columns[idx];\r\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\r\n\r\n    const updatedTargetRow = onPaste({\r\n      sourceRow: copiedCell.row,\r\n      sourceColumnKey: copiedCell.columnKey,\r\n      targetRow,\r\n      targetColumnKey: targetColumn.key,\r\n    });\r\n\r\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\r\n  }\r\n\r\n  function handleCellInput(event) {\r\n    if (!selectedCellIsWithinViewportBounds) return;\r\n    const row = rows[selectedPosition.rowIdx];\r\n    if (isGroupRow(row)) return;\r\n    const { key, shiftKey } = event;\r\n\r\n    // Select the row on Shift + Space\r\n    if (isSelectable && shiftKey && key === \" \") {\r\n      assertIsValidKeyGetter(rowKeyGetter);\r\n      const rowKey = rowKeyGetter(row);\r\n      selectRow({\r\n        row,\r\n        checked: !selectedRows1.has(rowKey),\r\n        isShiftClick: false,\r\n      });\r\n      // do not scroll\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    const column = columns[selectedPosition.idx];\r\n    column.editorOptions?.onCellKeyDown?.(event);\r\n    if (event.isDefaultPrevented()) return;\r\n\r\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\r\n      setSelectedPosition(({ idx, rowIdx }) => ({\r\n        idx,\r\n        rowIdx,\r\n        mode: \"EDIT\",\r\n        row,\r\n        originalRow: row,\r\n      }));\r\n    }\r\n  }\r\n  // console.log(\"headerRowHeight\", headerRowHeight);\r\n\r\n  /**\r\n   * utils\r\n   */\r\n  function isColIdxWithinSelectionBounds(idx) {\r\n    return idx >= minColIdx && idx <= maxColIdx;\r\n  }\r\n\r\n  function isRowIdxWithinViewportBounds(rowIdx) {\r\n    return rowIdx >= 0 && rowIdx < rows.length;\r\n  }\r\n\r\n  function isCellWithinSelectionBounds({ idx, rowIdx }) {\r\n    return (\r\n      rowIdx >= minRowIdx &&\r\n      rowIdx <= maxRowIdx &&\r\n      isColIdxWithinSelectionBounds(idx)\r\n    );\r\n  }\r\n\r\n  function isCellWithinViewportBounds({ idx, rowIdx }) {\r\n    return (\r\n      isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx)\r\n    );\r\n  }\r\n\r\n  function isCellEditable(position) {\r\n    return (\r\n      isCellWithinViewportBounds(position) &&\r\n      isSelectedCellEditable({\r\n        columns,\r\n        rows,\r\n        selectedPosition: position,\r\n        isGroupRow,\r\n      })\r\n    );\r\n  }\r\n\r\n  function selectCell(position, enableEditor) {\r\n    if (!isCellWithinSelectionBounds(position)) return;\r\n    commitEditorChanges();\r\n\r\n    if (enableEditor && isCellEditable(position)) {\r\n      const row = rows[position.rowIdx];\r\n      setSelectedPosition({ ...position, mode: \"EDIT\", row, originalRow: row });\r\n    } else if (isSamePosition(selectedPosition, position)) {\r\n      // Avoid re-renders if the selected cell state is the same\r\n      scrollIntoView(gridRef.current?.querySelector('[tabindex=\"0\"]'));\r\n    } else {\r\n      setSelectedPosition({ ...position, mode: \"SELECT\" });\r\n    }\r\n  }\r\n\r\n  function scrollToColumn(idx) {\r\n    const { current } = gridRef;\r\n    if (!current) return;\r\n\r\n    if (idx > lastFrozenColumnIndex) {\r\n      const { rowIdx } = selectedPosition;\r\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\r\n      const { clientWidth } = current;\r\n      const column = columns[idx];\r\n      const { left, width } = columnMetrics.get(column);\r\n      let right = left + width;\r\n\r\n      const colSpan = getSelectedCellColSpan({\r\n        rows,\r\n        topSummaryRows,\r\n        bottomSummaryRows,\r\n        rowIdx,\r\n        lastFrozenColumnIndex,\r\n        column,\r\n        isGroupRow,\r\n      });\r\n\r\n      if (colSpan !== undefined) {\r\n        const { left, width } = columnMetrics.get(\r\n          columns[column.idx + colSpan - 1]\r\n        );\r\n        right = left + width;\r\n      }\r\n\r\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\r\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\r\n      const sign = isRtl ? -1 : 1;\r\n      if (isCellAtLeftBoundary) {\r\n        current.scrollLeft = (left - totalFrozenColumnWidth) * sign;\r\n      } else if (isCellAtRightBoundary) {\r\n        current.scrollLeft = (right - clientWidth) * sign;\r\n      }\r\n    }\r\n  }\r\n\r\n  function getNextPosition(key, ctrlKey, shiftKey) {\r\n    const { idx, rowIdx } = selectedPosition;\r\n    const row = rows[rowIdx];\r\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\r\n\r\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\r\n    if (\r\n      key === leftKey &&\r\n      isRowSelected &&\r\n      isGroupRow(row) &&\r\n      !row.isExpanded &&\r\n      row.level !== 0\r\n    ) {\r\n      let parentRowIdx = -1;\r\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\r\n        const parentRow = rows[i];\r\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\r\n          parentRowIdx = i;\r\n          break;\r\n        }\r\n      }\r\n      if (parentRowIdx !== -1) {\r\n        return { idx, rowIdx: parentRowIdx };\r\n      }\r\n    }\r\n\r\n    switch (key) {\r\n      case \"ArrowUp\":\r\n        return { idx, rowIdx: rowIdx - 1 };\r\n      case \"ArrowDown\":\r\n        return { idx, rowIdx: rowIdx + 1 };\r\n      case leftKey:\r\n        return { idx: idx - 1, rowIdx };\r\n      case rightKey:\r\n        return { idx: idx + 1, rowIdx };\r\n      case \"Tab\":\r\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\r\n      case \"Home\":\r\n        // If row is selected then move focus to the first row\r\n        if (isRowSelected) return { idx, rowIdx: 0 };\r\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\r\n      case \"End\":\r\n        // If row is selected then move focus to the last row.\r\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\r\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\r\n      case \"PageUp\": {\r\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\r\n        const nextRowY =\r\n          getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\r\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\r\n      }\r\n      case \"PageDown\": {\r\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\r\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\r\n        return {\r\n          idx,\r\n          rowIdx:\r\n            nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1,\r\n        };\r\n      }\r\n      default:\r\n        return selectedPosition;\r\n    }\r\n  }\r\n\r\n  function navigate(event) {\r\n    const { key, shiftKey } = event;\r\n    let mode = cellNavigationMode;\r\n    if (key === \"Tab\") {\r\n      if (\r\n        canExitGrid({\r\n          shiftKey,\r\n          cellNavigationMode,\r\n          maxColIdx,\r\n          minRowIdx,\r\n          maxRowIdx,\r\n          selectedPosition,\r\n        })\r\n      ) {\r\n        commitEditorChanges();\r\n        // Allow focus to leave the grid so the next control in the tab order can be focused\r\n        return;\r\n      }\r\n\r\n      mode = cellNavigationMode === \"NONE\" ? \"CHANGE_ROW\" : cellNavigationMode;\r\n    }\r\n\r\n    // Do not allow focus to leave\r\n    event.preventDefault();\r\n\r\n    const ctrlKey = isCtrlKeyHeldDown(event);\r\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\r\n    if (isSamePosition(selectedPosition, nextPosition)) return;\r\n\r\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\r\n      columns,\r\n      colSpanColumns,\r\n      rows,\r\n      topSummaryRows,\r\n      bottomSummaryRows,\r\n      minRowIdx,\r\n      maxRowIdx,\r\n      lastFrozenColumnIndex,\r\n      cellNavigationMode: mode,\r\n      currentPosition: selectedPosition,\r\n      nextPosition,\r\n      isCellWithinBounds: isCellWithinSelectionBounds,\r\n      isGroupRow,\r\n    });\r\n\r\n    selectCell(nextSelectedCellPosition);\r\n  }\r\n\r\n  function getDraggedOverCellIdx(currentRowIdx) {\r\n    if (draggedOverRowIdx === undefined) return;\r\n    const { rowIdx } = selectedPosition;\r\n\r\n    const isDraggedOver =\r\n      rowIdx < draggedOverRowIdx\r\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\r\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\r\n\r\n    return isDraggedOver ? selectedPosition.idx : undefined;\r\n  }\r\n\r\n  function getLayoutCssVars() {\r\n    if (flexWidthViewportColumns.length === 0) return layoutCssVars;\r\n    const newTemplateColumns = [...templateColumns];\r\n    for (const column of flexWidthViewportColumns) {\r\n      newTemplateColumns[column.idx] = column.width;\r\n    }\r\n\r\n    return {\r\n      ...layoutCssVars,\r\n      gridTemplateColumns: newTemplateColumns.join(\" \"),\r\n    };\r\n  }\r\n\r\n  function handleFill({ columnKey, sourceRow, targetRow }) {\r\n    return { ...targetRow, [columnKey]: sourceRow[columnKey] };\r\n  }\r\n\r\n  function getDragHandle(rowIdx) {\r\n    if (\r\n      selectedPosition.rowIdx !== rowIdx ||\r\n      selectedPosition.mode === \"EDIT\" ||\r\n      hasGroups || // drag fill is not supported when grouping is enabled\r\n      onFill == null\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return (\r\n      <DragHandle\r\n        rows={rawRows}\r\n        columns={columns}\r\n        selectedPosition={selectedPosition}\r\n        isCellEditable={isCellEditable}\r\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\r\n        onRowsChange={onRowsChange}\r\n        onFill={onFill ? handleFill : null}\r\n        setDragging={setDragging}\r\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\r\n      />\r\n    );\r\n  }\r\n\r\n  function getCellEditor(rowIdx) {\r\n    if (\r\n      selectedPosition.rowIdx !== rowIdx ||\r\n      selectedPosition.mode === \"SELECT\"\r\n    )\r\n      return;\r\n\r\n    const { idx, row } = selectedPosition;\r\n    const column = columns[idx];\r\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\r\n      type: \"ROW\",\r\n      row,\r\n    });\r\n\r\n    const closeEditor = () => {\r\n      setSelectedPosition(({ idx, rowIdx }) => ({\r\n        idx,\r\n        rowIdx,\r\n        mode: \"SELECT\",\r\n      }));\r\n    };\r\n\r\n    const onRowChange = (row, commitChanges) => {\r\n      if (commitChanges) {\r\n        updateRow(column, selectedPosition.rowIdx, row);\r\n        closeEditor();\r\n      } else {\r\n        setSelectedPosition((position) => ({ ...position, row }));\r\n      }\r\n    };\r\n\r\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\r\n      // Discard changes if rows are updated from outside\r\n      closeEditor();\r\n    }\r\n\r\n    return (\r\n      <EditCell\r\n        key={`${column.key}`}\r\n        column={column}\r\n        colSpan={colSpan}\r\n        row={row}\r\n        handleReorderRow={handleReorderRow}\r\n        allrow={raawRows}\r\n        rowIndex={rowIdx}\r\n        api={apiObject}\r\n        node={node}\r\n        onRowChange={onRowChange}\r\n        closeEditor={closeEditor}\r\n      />\r\n    );\r\n  }\r\n\r\n  function getRowViewportColumns(rowIdx) {\r\n    const selectedColumn = columns[selectedPosition.idx];\r\n    if (\r\n      // idx can be -1 if grouping is enabled\r\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n      selectedColumn !== undefined &&\r\n      selectedPosition.rowIdx === rowIdx &&\r\n      !viewportColumns.includes(selectedColumn)\r\n    ) {\r\n      // Add the selected column to viewport columns if the cell is not within the viewport\r\n      return selectedPosition.idx > colOverscanEndIdx\r\n        ? [...viewportColumns, selectedColumn]\r\n        : [\r\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\r\n            selectedColumn,\r\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1),\r\n          ];\r\n    }\r\n    return viewportColumns;\r\n  }\r\n\r\n  var node;\r\n\r\n  var endRowIdxForRender;\r\n\r\n  const [RowNodes, setRowNodes] = useState();\r\n\r\n  function forEachNode(newFunction) {\r\n    RowNodes.forEach((data) => {\r\n      newFunction(data);\r\n    });\r\n  }\r\n  function getRowBounds(index) {\r\n    return {\r\n      rowTop: RowNodes[index].rowTop,\r\n      rowHeight: RowNodes[index].rowHeight,\r\n    };\r\n  }\r\n  function isRowPresent(object1) {\r\n    let result = false;\r\n    RowNodes.forEach((obj) => {\r\n      if (_.isEqual(object1, obj)) {\r\n        result = true;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  function getNodesInRangeForSelection(obj1, obj2) {\r\n    let firstIndex;\r\n    let secondIndex;\r\n    let startIndex;\r\n    let endIndex;\r\n    RowNodes.map((obj, idx) => {\r\n      if (_.isEqual(obj1, obj)) {\r\n        firstIndex = idx;\r\n      }\r\n      return true;\r\n    });\r\n    RowNodes.map((obj, idx) => {\r\n      if (_.isEqual(obj2, obj)) {\r\n        secondIndex = idx;\r\n      }\r\n      return true;\r\n    });\r\n    if (firstIndex && secondIndex) {\r\n      if (firstIndex < secondIndex) {\r\n        startIndex = firstIndex;\r\n        endIndex = secondIndex;\r\n      } else {\r\n        endIndex = firstIndex;\r\n        startIndex = secondIndex;\r\n      }\r\n    } else if (firstIndex) {\r\n      startIndex = 0;\r\n      endIndex = firstIndex;\r\n    } else if (secondIndex) {\r\n      startIndex = 0;\r\n      endIndex = secondIndex;\r\n    }\r\n    return RowNodes.slice(startIndex, endIndex + 1);\r\n  }\r\n  var getModelObject = {\r\n    getRow: (index) => RowNodes[index],\r\n    getRowNode: (idValue) => RowNodes.filter((data) => data.id === idValue),\r\n    getRowCount: () => rows.length,\r\n    getTopLevelRowCount: () => rows.length,\r\n    getTopLevelRowDisplayedIndex: (index) => (rows[index] ? index : null),\r\n    getRowIndexAtPixel: (pixel) => Math.floor(pixel / rowHeight),\r\n    isRowPresent,\r\n    getRowBounds,\r\n    isEmpty: () => raawRows.length === 0,\r\n    isRowsToRender: () => endRowIdxForRender !== 0,\r\n    getNodesInRangeForSelection,\r\n    forEachNode,\r\n    getType: () => \"clientSide\",\r\n    isLastRowIndexKnown: () => true,\r\n    // ensureRowHeightsValid\r\n    // start\r\n  };\r\n  function applyTransaction(transactionObject) {\r\n    let newRows = rows;\r\n    let updatedRowNodes = { added: [], updated: [], removed: [] };\r\n    let isUpdated = 0;\r\n    //Add Rows\r\n    let rowIndex1 = transactionObject.addIndex + 1;\r\n    for (let i = 0; i < transactionObject.add?.length; i++) {\r\n      let rowIndex;\r\n      if (rowKeyGetter) {\r\n        rowIndex = findRowIndex(rowKeyGetter(transactionObject.add[i]));\r\n      } else {\r\n        rowIndex = findRowIndex(transactionObject.add[i].id);\r\n      }\r\n      if (rowIndex === -1) {\r\n        if (transactionObject.addIndex) {\r\n          if (transactionObject.addIndex > raawRows.length) return;\r\n          const newRowNode = createNewRowNode(\r\n            rowIndex1,\r\n            transactionObject.add[i]\r\n          );\r\n          newRows.splice(rowIndex1, 0, newRowNode.data);\r\n          LeafNodes.splice(rowIndex1, 0, newRowNode);\r\n          updatedRowNodes.added.push(LeafNodes[rowIndex1]);\r\n          rowIndex1++;\r\n          isUpdated++;\r\n        } else {\r\n          rowIndex = transactionObject.add[i].id - 1;\r\n          const newRowNode = createNewRowNode(\r\n            rowIndex,\r\n            transactionObject.add[i]\r\n          );\r\n\r\n          newRows.splice(rowIndex, 0, newRowNode.data);\r\n          LeafNodes.splice(rowIndex, 0, newRowNode);\r\n          updatedRowNodes.added.push(newRowNode);\r\n          isUpdated++;\r\n        }\r\n      }\r\n    }\r\n\r\n    //Update Row Data\r\n    for (let i = 0; i < transactionObject.update?.length; i++) {\r\n      const values = Object.entries(transactionObject.update[i]);\r\n      let rowIndex;\r\n      if (rowKeyGetter) {\r\n        rowIndex = findRowIndex(rowKeyGetter(transactionObject.update[i]));\r\n      } else {\r\n        rowIndex = findRowIndex(transactionObject.update[i].id);\r\n      }\r\n      for (let j = 0; j < values.length; j++) {\r\n        const field = values[j][0];\r\n        const value = values[j][1];\r\n        LeafNodes[rowIndex].data[field] = value;\r\n      }\r\n      updatedRowNodes.updated.push(LeafNodes[rowIndex]);\r\n      isUpdated++;\r\n    }\r\n    //Remove Rows\r\n    transactionObject.remove?.sort((a, b) => (a.id < b.id ? 1 : -1));\r\n    for (let i = 0; i < transactionObject.remove?.length; i++) {\r\n      let rowIndex;\r\n      if (rowKeyGetter) {\r\n        rowIndex = findRowIndex(rowKeyGetter(transactionObject.remove[i]));\r\n      } else {\r\n        rowIndex = findRowIndex(transactionObject.remove[i].id);\r\n      }\r\n\r\n      if (rowIndex > -1) {\r\n        newRows.splice(rowIndex, 1);\r\n        updatedRowNodes.removed.push(LeafNodes[rowIndex]);\r\n        LeafNodes.splice(rowIndex, 1);\r\n        isUpdated++;\r\n      }\r\n    }\r\n    if (isUpdated > 0) RowNodes[0].setDataValue(\"\", \"\");\r\n    return updatedRowNodes;\r\n  }\r\n\r\n  function setRowData(rowData) {\r\n    if (rowData) {\r\n      setRawRows(rowData);\r\n    }\r\n  }\r\n\r\n  var LeafNodes = getAllLeafNodes();\r\n  function getAllLeafNodes() {\r\n    let leafNodes = [];\r\n    for (let i = 0; i < raawRows.length; i++) {\r\n      var node = {\r\n        rowIndex: i,\r\n        childIndex: i + 1,\r\n        data: raawRows[i],\r\n        rowHeight: getRowHeight(i),\r\n        lastChild: raawRows.length === i + 1,\r\n        firstChild: i === 0,\r\n        id: raawRows[i].id ?? String(i),\r\n        // selected: selectedRows.includes(i),\r\n      };\r\n      leafNodes.push(node);\r\n    }\r\n    return leafNodes;\r\n  }\r\n  function forEachLeafNode(callback, rowNodes) {\r\n    let updatedLeafNodes = [];\r\n    for (let i = 0; i < rowNodes?.length ?? LeafNodes.length; i++) {\r\n      callback(rowNodes[i] ?? LeafNodes[i]);\r\n      updatedLeafNodes.push(rowNodes[i].data ?? LeafNodes[i].data);\r\n    }\r\n    setRawRows(updatedLeafNodes);\r\n  }\r\n  function forEachLeafNodeAfterFilter(callback) {\r\n    forEachLeafNode(callback, RowNodes);\r\n  }\r\n  function forEachLeafNodeAfterFilterAndSort(callback) {\r\n    forEachLeafNode(callback, RowNodes);\r\n  }\r\n  function findRowIndex(id) {\r\n    let index = -1;\r\n    for (let i = 0; i < LeafNodes.length; i++) {\r\n      if (id === LeafNodes[i].data?.id) index = LeafNodes[i].rowIndex;\r\n    }\r\n    return index;\r\n  }\r\n\r\n  function createNewRowNode(index, data) {\r\n    const newRowNode = {\r\n      rowIndex: index,\r\n      childIndex: index + 1,\r\n      data: data,\r\n      rowHeight: getRowHeight(index),\r\n      lastChild: LeafNodes.length === index - 1,\r\n      firstChild: index === 0,\r\n      id: data.id ?? String(index + 1),\r\n    };\r\n    return newRowNode;\r\n  }\r\n  function getSelectedRows() {\r\n    return selectedRows1;\r\n  }\r\n\r\n  function selectAll(filteredRows) {\r\n    if (!onSelectedRowsChange) return;\r\n\r\n    assertIsValidKeyGetter(rowKeyGetter);\r\n    const newSelectedRows = new Set(selectedRows1);\r\n    const newSelectedRows1 = selectedRows;\r\n    for (const row of filteredRows?.data ?? rawRows) {\r\n      const rowKey = rowKeyGetter(row);\r\n\r\n      newSelectedRows.add(rowKey);\r\n      if (!newSelectedRows1.includes(row)) newSelectedRows1.push(row);\r\n    }\r\n\r\n    onSelectedRowsChange1(newSelectedRows);\r\n  }\r\n  function deselectAll(filteredRows) {\r\n    if (!onSelectedRowsChange) return;\r\n\r\n    assertIsValidKeyGetter(rowKeyGetter);\r\n    let newSelectedRows = new Set(selectedRows1);\r\n    let newSelectedRows1 = selectedRows;\r\n    for (const row of filteredRows?.data ?? rawRows) {\r\n      const rowKey = rowKeyGetter(row);\r\n\r\n      newSelectedRows.delete(rowKey);\r\n      newSelectedRows1.splice(newSelectedRows1.indexOf(row), 1);\r\n    }\r\n    onSelectedRowsChange1(newSelectedRows);\r\n  }\r\n\r\n  function getSelectedNodes() {\r\n    let selectedNodes = new Set();\r\n    for (let i = 0; i < RowNodes.length; i++) {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      RowNodes[i].selected ? selectedNodes.add(RowNodes[i]) : null;\r\n    }\r\n    return selectedNodes;\r\n  }\r\n  function selectAllFiltered() {\r\n    selectAll(RowNodes);\r\n  }\r\n  function deselectAllFiltered() {\r\n    deselectAll(RowNodes);\r\n  }\r\n  var totalPages =\r\n    Math.floor(raawRows.length / size) + (raawRows.length % size < 0 ? 1 : 0);\r\n  function paginationGoToPage(pageNumberNew) {\r\n    if (pagination) {\r\n      if (0 < pageNumberNew && pageNumberNew <= totalPages) {\r\n        setCurrent(pageNumberNew);\r\n      } else if (pageNumberNew < 0) {\r\n        setCurrent(1);\r\n      } else if (pageNumberNew > totalPages) {\r\n        setCurrent(totalPages);\r\n      }\r\n    }\r\n  }\r\n\r\n  function paginationGoToNextPage() {\r\n    if (pagination && current + 1 <= totalPages) {\r\n      setCurrent(current + 1);\r\n    }\r\n  }\r\n  function paginationGoToPreviousPage() {\r\n    if (pagination && current - 1 > 0) {\r\n      setCurrent(current - 1);\r\n    }\r\n  }\r\n  function getFocusedCell() {\r\n    return selectedPosition.rowIdx >= 0\r\n      ? {\r\n          rowIndex: selectedPosition.rowIdx,\r\n          column: columns[selectedPosition.idx],\r\n        }\r\n      : undefined;\r\n  }\r\n  function setFocusedCell(idx, key) {\r\n    let index;\r\n    columns.map((obj, position) => {\r\n      if (obj.key === key) {\r\n        index = position;\r\n      }\r\n      return true;\r\n    });\r\n    setSelectedPosition({ idx: index, rowIdx: idx, mode: \"SELECT\" });\r\n  }\r\n  function tabToNextCell() {\r\n    let columnLength = columns.length;\r\n    let rowsLength = rows.length;\r\n    let idx;\r\n    let rowIdx;\r\n    if (selectedPosition.idx + 1 < columnLength) {\r\n      idx = selectedPosition.idx + 1;\r\n      rowIdx = selectedPosition.rowIdx;\r\n    } else {\r\n      idx = 0;\r\n      rowIdx =\r\n        selectedPosition.rowIdx + 1 < rowsLength\r\n          ? selectedPosition.rowIdx + 1\r\n          : 0;\r\n    }\r\n    setSelectedPosition({ idx: idx, rowIdx: rowIdx, mode: \"SELECT\" });\r\n  }\r\n  function tabToPreviousCell() {\r\n    let columnLength = columns.length;\r\n    let rowsLength = rows.length;\r\n    let idx;\r\n    let rowIdx;\r\n    if (selectedPosition.idx - 1 >= 0) {\r\n      idx = selectedPosition.idx - 1;\r\n      rowIdx = selectedPosition.rowIdx;\r\n    } else {\r\n      idx = columnLength - 1;\r\n      rowIdx =\r\n        selectedPosition.rowIdx - 1 >= 0\r\n          ? selectedPosition.rowIdx - 1\r\n          : rowsLength - 1;\r\n    }\r\n    setSelectedPosition({ idx: idx, rowIdx: rowIdx, mode: \"SELECT\" });\r\n  }\r\n  function exportDataAsCsv(fileName) {\r\n    let name = fileName ?? \"ExportToCSV\";\r\n    exportToCsv(rawRows, rawColumns, name);\r\n  }\r\n  function exportDataAsExcel(fileName) {\r\n    let name = fileName ?? \"ExportToXlsx\";\r\n    exportToXlsx(rawRows, rawColumns, name);\r\n  }\r\n  function exportDataAsPdf(fileName) {\r\n    let name = fileName ?? \"ExportToPdf\";\r\n    exportToPdf(rawRows, rawColumns, name);\r\n  }\r\n  function isAnyFilterPresent() {\r\n    let filterPresent = false;\r\n    viewportColumns.forEach((obj) => {\r\n      if (obj?.filter) filterPresent = true;\r\n    });\r\n    return filterPresent;\r\n  }\r\n  let getViewportRowsSample = useLatestFunc((rowArray) => {\r\n    let rowElementsSample = [];\r\n    let listOfRows = rowArray;\r\n    let node;\r\n    // let startRowIndex = 0;\r\n\r\n    const { rowIdx: selectedRowIdx } = selectedPosition;\r\n\r\n    const startRowIdx = 0;\r\n    const endRowIdx = listOfRows.length - 1;\r\n    for (\r\n      let viewportRowIdx = startRowIdx;\r\n      viewportRowIdx <= endRowIdx;\r\n      viewportRowIdx++\r\n    ) {\r\n      const isRowOutsideViewport =\r\n        viewportRowIdx === rowOverscanStartIdx - 1 ||\r\n        viewportRowIdx === rowOverscanEndIdx + 1;\r\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\r\n\r\n      //   let rowColumns = viewportColumns;\r\n      // const selectedColumn = columns[selectedIdx];\r\n      // selectedIdx can be -1 if grouping is enabled\r\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n\r\n      const row = listOfRows[rowIdx];\r\n      // const gridRowStart = headerRowsCount + topSummaryRowsCount + rowIdx + 1;\r\n\r\n      // startRowIndex++;\r\n      // let key;\r\n      // let isRowSelected = false;\r\n\r\n      // key = hasGroups ? startRowIndex : rowIdx;\r\n\r\n      function setDataValue(key, newValue) {\r\n        let data = row;\r\n        data[key] = newValue;\r\n        let list = [...rawRows];\r\n        list[rowIdx] = data;\r\n        setRawRows(list);\r\n      }\r\n      function setData(newValue) {\r\n        let list = [...rawRows];\r\n        list[rowIdx] = newValue;\r\n        setRawRows(list);\r\n      }\r\n      node = {\r\n        rowIndex: rowIdx,\r\n        rowTop: rowIdx * rowHeight,\r\n        childIndex: rowIdx + 1,\r\n        data: row,\r\n        rowHeight: rowHeight,\r\n        lastChild: raawRows.length === rowIdx + 1,\r\n        firstChild: rowIdx === 0,\r\n        id: row?.id ?? String(rowIdx),\r\n        selected: selectedRowIdx === rowIdx,\r\n        setDataValue,\r\n        setData,\r\n        parent: {\r\n          allLeafChildren: RowNodes,\r\n          childrenAfterFilter: afterFilter,\r\n          childrenAfterSort: afterFilter,\r\n        },\r\n\r\n        expanded: rows[rowIdx]?.isExpanded,\r\n\r\n        isSelected: () => selectedRowIdx === rowIdx,\r\n        setSelected: () => {\r\n          selectRow({\r\n            row,\r\n            checked: !selectedRows.includes(rowKeyGetter(row)),\r\n            isShiftClick: false,\r\n          });\r\n        },\r\n        isExpandable: () => {\r\n          return rows[rowIdx]?.isExpanded;\r\n        },\r\n        setExpanded: (value) => {\r\n          var expandIds = new Set(expandedGroupIds);\r\n          let rowKey = rowKeyGetter(rows[rowIdx]);\r\n          if (value) {\r\n            expandIds.add(rowKey);\r\n          } else {\r\n            expandIds.delete(rowKey);\r\n          }\r\n          onExpandedGroupIdsChange(expandIds);\r\n        },\r\n\r\n        updateData: setData,\r\n        // isSelected: () => isRowSelected,\r\n      };\r\n      rowElementsSample.push(node);\r\n    }\r\n\r\n    return rowElementsSample;\r\n  });\r\n\r\n  var apiObject = {\r\n    getColumnDefs: () => rawColumns,\r\n    setColumnDefs: (columns) => setRawColumns(columns),\r\n    setRowData: setRowData,\r\n    getRowNodes: (value) => RowNodes[value],\r\n    setHeaderHeight: (height) => setHeaderHeightFromRef(height),\r\n    getDisplayedRowCount: () => rawRows.length,\r\n    getDisplayedRowAtIndex: (index) => rawRows[index],\r\n    getFirstDisplayedRow: () => rawRows[0],\r\n    getLastDisplayedRow: () => raawRows[raawRows.length - 1],\r\n    getModel: () => getModelObject,\r\n    forEachNode,\r\n    forEachLeafNode,\r\n    forEachLeafNodeAfterFilter,\r\n    forEachLeafNodeAfterFilterAndSort,\r\n    getSelectedNodes,\r\n    applyTransaction,\r\n    getSelectedRows,\r\n    getValue: (colKey, rowNode) => {\r\n      return LeafNodes[rowNode.rowIndex].data[colKey];\r\n    },\r\n    selectAll: selectAll,\r\n    deselectAll: deselectAll,\r\n    selectAllFiltered,\r\n    deselectAllFiltered,\r\n    getRenderedNodes: () => renderedRowNodes,\r\n    setPagination: (value) => setPagination(value),\r\n    paginationIsLastPageFound: () => true,\r\n    paginationGetPageSize: () => (pagination ? size : raawRows.length),\r\n    paginationSetPageSize: (newPageSize) =>\r\n      pagination ? setSize(newPageSize) : null,\r\n    paginationGetCurrentPage: () => current - 1,\r\n    paginationGetTotalPages: () =>\r\n      Math.floor(raawRows.length / size) + (raawRows.length % size < 0 ? 1 : 0),\r\n    paginationGetRowCount: () => (pagination ? raawRows.length : 0),\r\n    paginationGoToPage: paginationGoToPage,\r\n    paginationGoToNextPage: paginationGoToNextPage,\r\n    paginationGoToPreviousPage: paginationGoToPreviousPage,\r\n    paginationGoToFirstPage: () => (pagination ? setCurrent(1) : null),\r\n    paginationGoToLastPage: () => (pagination ? setCurrent(totalPages) : null),\r\n    rowModel: {\r\n      rowsToDisplay: RowNodes,\r\n      rootNode: {\r\n        allLeafChildren: getViewportRowsSample(raawRows),\r\n        childrenAfterFilter: getViewportRowsSample(rows),\r\n        childrenAfterSort: getViewportRowsSample(rows),\r\n      },\r\n      columnModel: { columnDefs: rawColumns, displayedColumns: columns },\r\n      nodeManager: { allNodesMap: getViewportRowsSample(raawRows) },\r\n      csvCreator: { exportDataAsCsv: exportDataAsCsv },\r\n    },\r\n    getFocusedCell: getFocusedCell,\r\n    setFocusedCell: setFocusedCell,\r\n    clearFocusedCell: () => setSelectedPosition(initialPosition),\r\n    tabToNextCell: tabToNextCell,\r\n    tabToPreviousCell: tabToPreviousCell,\r\n    exportDataAsCsv: exportDataAsCsv,\r\n    exportDataAsExcel: exportDataAsExcel,\r\n    exportDataAsPdf: exportDataAsPdf,\r\n    setDefaultColDef: (value) =>\r\n      setDefaultColumnDef({ ...defaultColumnDef, ...value }),\r\n    isAnyFilterPresent: isAnyFilterPresent,\r\n    expandAll: () => setExpandAll(true),\r\n    collapseAll: () => setExpandAll(false),\r\n    getFilterModel: () => filters,\r\n    setFilterModel: (value) => setFilters({ ...filters, ...value }),\r\n  };\r\n\r\n  ///////////  start\r\n  if (onGridReady) {\r\n    onGridReady({\r\n      api: apiObject,\r\n      columnApi: columnApiObject,\r\n      type: \"gridReady\",\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    setAfterFilter(getViewportRowsSample(rows));\r\n  }, [rows, getViewportRowsSample]);\r\n\r\n  useEffect(() => {\r\n    setRowNodes(getViewportRowsSample(raawRows));\r\n  }, [expandedGroupIds, expandAll, raawRows, getViewportRowsSample]);\r\n\r\n  /////\r\n  var renderedRowNodes = [];\r\n  function getViewportRows() {\r\n    let node;\r\n    const rowElements = [];\r\n    let startRowIndex = 0;\r\n\r\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\r\n\r\n    const startRowIdx =\r\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\r\n        ? rowOverscanStartIdx - 1\r\n        : rowOverscanStartIdx;\r\n    const endRowIdx =\r\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\r\n        ? rowOverscanEndIdx + 1\r\n        : rowOverscanEndIdx;\r\n    endRowIdxForRender = endRowIdx;\r\n    for (\r\n      let viewportRowIdx = startRowIdx;\r\n      viewportRowIdx <= endRowIdx;\r\n      viewportRowIdx++\r\n    ) {\r\n      const isRowOutsideViewport =\r\n        viewportRowIdx === rowOverscanStartIdx - 1 ||\r\n        viewportRowIdx === rowOverscanEndIdx + 1;\r\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\r\n\r\n      let rowColumns = viewportColumns;\r\n      const selectedColumn = columns[selectedIdx];\r\n      // selectedIdx can be -1 if grouping is enabled\r\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n      if (selectedColumn !== undefined) {\r\n        if (isRowOutsideViewport) {\r\n          // if the row is outside the viewport then only render the selected cell\r\n          rowColumns = [selectedColumn];\r\n        } else {\r\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\r\n          rowColumns = getRowViewportColumns(rowIdx);\r\n        }\r\n      }\r\n\r\n      const row = rows[rowIdx];\r\n\r\n      const gridRowStart = headerRowsCount + topSummaryRowsCount + rowIdx + 1;\r\n      if (isGroupRow(row)) {\r\n        ({ startRowIndex } = row);\r\n        const isGroupRowSelected =\r\n          isSelectable &&\r\n          row.childRows.every((cr) => selectedRows1?.has(rowKeyGetter(cr)));\r\n\r\n        rowElements.push(\r\n          <GroupRowRenderer\r\n            // aria-level is 1-based\r\n            aria-level={row.level + 1}\r\n            aria-setsize={row.setSize}\r\n            // aria-posinset is 1-based\r\n            aria-posinset={row.posInSet + 1}\r\n            // aria-rowindex is 1 based\r\n            aria-rowindex={\r\n              headerRowsCount + topSummaryRowsCount + startRowIndex + 1\r\n            }\r\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\r\n            key={row.id}\r\n            id={row.id}\r\n            groupKey={row.groupKey}\r\n            viewportColumns={rowColumns}\r\n            childRows={row.childRows}\r\n            rowIdx={rowIdx}\r\n            row={row}\r\n            gridRowStart={gridRowStart}\r\n            height={getRowHeight(rowIdx)}\r\n            level={row.level}\r\n            isExpanded={row.isExpanded}\r\n            selectedCellIdx={\r\n              selectedRowIdx === rowIdx ? selectedIdx : undefined\r\n            }\r\n            isRowSelected={isGroupRowSelected}\r\n            selectGroup={selectGroupLatest}\r\n            toggleGroup={toggleGroupLatest}\r\n          />\r\n        );\r\n        continue;\r\n      }\r\n\r\n      startRowIndex++;\r\n      let key;\r\n      let isRowSelected = false;\r\n      if (typeof rowKeyGetter === \"function\") {\r\n        key = rowKeyGetter(row);\r\n        isRowSelected = selectedRows1?.has(key) ?? false;\r\n      } else {\r\n        key = hasGroups ? startRowIndex : rowIdx;\r\n      }\r\n\r\n      function setDataValue(key, newValue) {\r\n        //console.log(row);\r\n        let data = row;\r\n        data[key] = newValue;\r\n        let list = [...rawRows];\r\n        list[rowIdx] = data;\r\n        //console.log(\"newList\", list);\r\n        setRawRows(list);\r\n      }\r\n      function setData(newValue) {\r\n        let list = [...rawRows];\r\n        list[rowIdx] = newValue;\r\n        setRawRows(list);\r\n      }\r\n      node = {\r\n        rowIndex: rowIdx,\r\n        rowTop: rowHeight * rowIdx,\r\n        childIndex: rowIdx + 1,\r\n        data: row,\r\n        rowHeight: rowHeight,\r\n        lastChild: raawRows.length === rowIdx + 1,\r\n        firstChild: rowIdx === 0,\r\n        id: row?.id ?? String(rowIdx),\r\n        selected: selectedRowIdx === rowIdx,\r\n        setDataValue,\r\n        setData,\r\n        parent: {\r\n          allLeafChildren: RowNodes,\r\n          childrenAfterFilter: afterFilter,\r\n          childrenAfterSort: afterFilter,\r\n        },\r\n        updateData: setData,\r\n        expanded: rows[rowIdx]?.isExpanded,\r\n        isSelected: () => selectedRowIdx === rowIdx,\r\n        setSelected: () => {\r\n          selectRow({\r\n            row,\r\n            checked: !selectedRows.includes(rowKeyGetter(row)),\r\n            isShiftClick: false,\r\n          });\r\n        },\r\n        isExpandable: () => {\r\n          return rows[rowIdx]?.isExpanded;\r\n        },\r\n        setExpanded: (value) => {\r\n          var expandIds = new Set(expandedGroupIds);\r\n          let rowKey = rowKeyGetter(rows[rowIdx]);\r\n          if (value) {\r\n            expandIds.add(rowKey);\r\n          } else {\r\n            expandIds.delete(rowKey);\r\n          }\r\n          onExpandedGroupIdsChange(expandIds);\r\n        },\r\n      };\r\n      renderedRowNodes.push(node);\r\n      rowElements.push(\r\n        rowRenderer(key, {\r\n          // aria-rowindex is 1 based\r\n          \"aria-rowindex\":\r\n            headerRowsCount +\r\n            topSummaryRowsCount +\r\n            (hasGroups ? startRowIndex : rowIdx) +\r\n            1,\r\n          \"aria-selected\": isSelectable ? isRowSelected : undefined,\r\n          totalColumns: columns.length,\r\n          rowIdx,\r\n          rows,\r\n          row,\r\n          selectedCellRowStyle,\r\n          api: apiObject,\r\n          columnApi: columnApiObject,\r\n          node,\r\n          viewportColumns: rowColumns,\r\n          isRowSelected,\r\n          onRowClick: onRowClick,\r\n          onCellClick: onCellClickLatest,\r\n          onCellDoubleClick: onCellDoubleClickLatest,\r\n          onCellContextMenu: onCellContextMenuLatest,\r\n          onRowDoubleClick: onRowDoubleClick,\r\n          rowClass,\r\n          gridRowStart,\r\n          height: getRowHeight(rowIdx),\r\n          copiedCellIdx:\r\n            copiedCell !== null && copiedCell.row === row\r\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\r\n              : undefined,\r\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\r\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\r\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\r\n          lastFrozenColumnIndex,\r\n          onRowChange: handleFormatterRowChangeLatest,\r\n          selectCell: selectViewportCellLatest,\r\n          selectedCellDragHandle: getDragHandle(rowIdx),\r\n          selectedCellEditor: getCellEditor(rowIdx),\r\n          handleReorderRow: handleReorderRow,\r\n        })\r\n      );\r\n    }\r\n    return rowElements;\r\n  }\r\n\r\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\r\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\r\n    setSelectedPosition(initialPosition);\r\n    setDraggedOverRowIdx(undefined);\r\n  }\r\n\r\n  let templateRows = `${headerRowHeight}px`;\r\n  if (topSummaryRowsCount > 0) {\r\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\r\n  }\r\n  if (rows.length > 0) {\r\n    templateRows += gridTemplateRows;\r\n  }\r\n  if (bottomSummaryRowsCount > 0) {\r\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\r\n  }\r\n\r\n  const isGroupRowFocused =\r\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== -2;\r\n\r\n  useEffect(() => {\r\n    if (paginationAutoPageSize) {\r\n      if (raawRows.length <= 500) {\r\n        setSize(20);\r\n      } else if (1000 >= raawRows.length && raawRows.length > 500) {\r\n        setSize(30);\r\n      } else {\r\n        setSize(40);\r\n      }\r\n    }\r\n  }, [raawRows, paginationAutoPageSize]);\r\n\r\n  useEffect(() => {\r\n    const target = document.getElementById(\"DataGrid\");\r\n    if (props.restriction?.copy) {\r\n      target.addEventListener(\"copy\", (event) => {\r\n        event.preventDefault();\r\n      });\r\n    }\r\n    if (props.restriction?.paste) {\r\n      target.addEventListener(\"paste\", (event) => {\r\n        event.preventDefault();\r\n      });\r\n    }\r\n\r\n    return (\r\n      target?.removeEventListener(\"copy\", () => {}),\r\n      target?.removeEventListener(\"paste\", () => {})\r\n    );\r\n  }, [props.restriction?.paste, props.restriction?.copy]);\r\n\r\n  const toolbarClassname = css`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 8px;\r\n    margin-block-end: 8px;\r\n  `;\r\n  return (\r\n    <>\r\n      {props.export && (\r\n        <div className={toolbarClassname}>\r\n          {props.export.csvFileName && (\r\n            <ExportButton\r\n              onExport={() => exportDataAsCsv(props.export.csvFileName)}\r\n            >\r\n              Export to CSV\r\n            </ExportButton>\r\n          )}\r\n          {props.export.excelFileName && (\r\n            <ExportButton\r\n              onExport={() => exportDataAsExcel(props.export.excelFileName)}\r\n            >\r\n              Export to XSLX\r\n            </ExportButton>\r\n          )}\r\n          {props.export.pdfFileName && (\r\n            <ExportButton\r\n              onExport={() => exportDataAsPdf(props.export.pdfFileName)}\r\n            >\r\n              Export to PDF\r\n            </ExportButton>\r\n          )}\r\n        </div>\r\n      )}\r\n      <div\r\n        id=\"DataGrid\"\r\n        role={hasGroups ? \"treegrid\" : \"grid\"}\r\n        aria-label={ariaLabel}\r\n        aria-labelledby={ariaLabelledBy}\r\n        aria-describedby={ariaDescribedBy}\r\n        aria-multiselectable={isSelectable ? true : undefined}\r\n        aria-colcount={columns.length}\r\n        aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\r\n        className={clsx(\r\n          rootClassname,\r\n          {\r\n            [viewportDraggingClassname]: isDragging,\r\n          },\r\n          className,\r\n          enableFilter && filterContainerClassname\r\n        )}\r\n        style={{\r\n          ...style,\r\n\r\n          // set scrollPadding to correctly position non-sticky cells after scrolling\r\n          scrollPaddingInlineStart:\r\n            selectedPosition.idx > lastFrozenColumnIndex\r\n              ? `${totalFrozenColumnWidth}px`\r\n              : undefined,\r\n\r\n          scrollPaddingBlock:\r\n            selectedPosition.rowIdx >= 0 &&\r\n            selectedPosition.rowIdx < rows.length\r\n              ? `${\r\n                  headerRowHeight + topSummaryRowsCount * summaryRowHeight\r\n                }px ${bottomSummaryRowsCount * summaryRowHeight}px`\r\n              : undefined,\r\n\r\n          gridTemplateRows: templateRows,\r\n          \"--rdg-header-row-height\": `${headerRowHeight}px`,\r\n          \"--rdg-summary-row-height\": `${summaryRowHeight}px`,\r\n          \"--rdg-sign\": isRtl ? -1 : 1,\r\n          ...getLayoutCssVars(),\r\n        }}\r\n        dir={direction}\r\n        ref={gridRef}\r\n        onScroll={handleScroll}\r\n        onKeyDown={handleKeyDown}\r\n        data-testid={testId}\r\n      >\r\n        {/* extra div is needed for row navigation in a treegrid */}\r\n        {hasGroups && (\r\n          <div\r\n            ref={rowRef}\r\n            tabIndex={isGroupRowFocused ? 0 : -1}\r\n            className={clsx(focusSinkClassname, {\r\n              [rowSelected]: isGroupRowFocused,\r\n              [rowSelectedWithFrozenCell]:\r\n                isGroupRowFocused && lastFrozenColumnIndex !== -1,\r\n            })}\r\n            style={{\r\n              gridRowStart: selectedPosition.rowIdx + 2,\r\n            }}\r\n            onKeyDown={handleKeyDown}\r\n          />\r\n        )}\r\n        <FilterContext.Provider value={filters}>\r\n          <DataGridDefaultComponentsProvider value={defaultGridComponents}>\r\n            <HeaderRow\r\n              rows={rawRows}\r\n              columns={getRowViewportColumns(-1)}\r\n              handleReorderColumn={handleReorderColumn}\r\n              selectedPosition={selectedPosition}\r\n              selectedCellHeaderStyle={selectedCellHeaderStyle}\r\n              onColumnResize={handleColumnResizeLatest}\r\n              allRowsSelected={allRowsSelected}\r\n              onAllRowsSelectionChange={selectAllRowsLatest}\r\n              sortColumns={sortColumns}\r\n              onSortColumnsChange={onSortColumnsChangeLatest}\r\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\r\n              selectedCellIdx={\r\n                selectedPosition.rowIdx === minRowIdx\r\n                  ? selectedPosition.idx\r\n                  : undefined\r\n              }\r\n              selectCell={selectHeaderCellLatest}\r\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\r\n              direction={direction}\r\n              setFilters={setFilters}\r\n            />\r\n            {rows.length === 0 && noRowsFallback ? (\r\n              noRowsFallback\r\n            ) : (\r\n              <>\r\n                {topSummaryRows?.map((row, rowIdx) => {\r\n                  const gridRowStart = headerRowsCount + rowIdx + 1;\r\n                  const summaryRowIdx = rowIdx + minRowIdx + 1;\r\n                  const isSummaryRowSelected =\r\n                    selectedPosition.rowIdx === summaryRowIdx;\r\n                  const top = headerRowHeight + summaryRowHeight * rowIdx;\r\n\r\n                  return (\r\n                    <SummaryRow\r\n                      aria-rowindex={gridRowStart}\r\n                      // rome-ignore lint/suspicious/noArrayIndexKey: <explanation>\r\n                      key={rowIdx}\r\n                      rowIdx={rowIdx}\r\n                      gridRowStart={gridRowStart}\r\n                      row={row}\r\n                      top={top}\r\n                      bottom={undefined}\r\n                      lastTopRowIdx={topSummaryRowsCount - 1}\r\n                      viewportColumns={getRowViewportColumns(summaryRowIdx)}\r\n                      lastFrozenColumnIndex={lastFrozenColumnIndex}\r\n                      selectedCellIdx={\r\n                        isSummaryRowSelected ? selectedPosition.idx : undefined\r\n                      }\r\n                      selectCell={selectTopSummaryCellLatest}\r\n                    />\r\n                  );\r\n                })}\r\n                <RowSelectionChangeProvider value={selectRowLatest}>\r\n                  {getViewportRows()}\r\n                </RowSelectionChangeProvider>\r\n                {bottomSummaryRows?.map((row, rowIdx) => {\r\n                  const gridRowStart =\r\n                    headerRowsCount +\r\n                    topSummaryRowsCount +\r\n                    rows.length +\r\n                    rowIdx +\r\n                    1;\r\n                  const summaryRowIdx = rows.length + rowIdx;\r\n                  const isSummaryRowSelected =\r\n                    selectedPosition.rowIdx === summaryRowIdx;\r\n                  const top =\r\n                    clientHeight > totalRowHeight\r\n                      ? gridHeight -\r\n                        summaryRowHeight * (bottomSummaryRows.length - rowIdx)\r\n                      : undefined;\r\n                  const bottom =\r\n                    top === undefined\r\n                      ? summaryRowHeight *\r\n                        (bottomSummaryRows.length - 1 - rowIdx)\r\n                      : undefined;\r\n\r\n                  return (\r\n                    <>\r\n                      <SummaryRow\r\n                        aria-rowindex={\r\n                          headerRowsCount +\r\n                          topSummaryRowsCount +\r\n                          rowsCount +\r\n                          rowIdx +\r\n                          1\r\n                        }\r\n                        // rome-ignore lint/suspicious/noArrayIndexKey: <explanation>\r\n                        key={rowIdx}\r\n                        rowIdx={rowIdx}\r\n                        gridRowStart={gridRowStart}\r\n                        row={row}\r\n                        top={top}\r\n                        bottom={bottom}\r\n                        lastTopRowIdx={undefined}\r\n                        viewportColumns={getRowViewportColumns(summaryRowIdx)}\r\n                        lastFrozenColumnIndex={lastFrozenColumnIndex}\r\n                        selectedCellIdx={\r\n                          isSummaryRowSelected\r\n                            ? selectedPosition.idx\r\n                            : undefined\r\n                        }\r\n                        selectCell={selectBottomSummaryCellLatest}\r\n                        selectedRows={selectedRows}\r\n                      />\r\n                    </>\r\n                  );\r\n                })}\r\n              </>\r\n            )}\r\n\r\n            {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\r\n            {renderMeasuringCells(viewportColumns)}\r\n          </DataGridDefaultComponentsProvider>\r\n        </FilterContext.Provider>\r\n        {createPortal(\r\n          <div dir={direction}>\r\n            <ContextMenu id=\"grid-context-menu\" rtl={direction === \"rtl\"}>\r\n              {contextMenuItems.map((item) =>\r\n                item.subMenu?.length > 0 ? (\r\n                  <SubMenu title={item.name}>\r\n                    {item.subMenu.map((subItem) => (\r\n                      <MenuItem onClick={subItem.action}>\r\n                        {subItem.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </SubMenu>\r\n                ) : (\r\n                  <MenuItem onClick={item.action}>{item.name}</MenuItem>\r\n                )\r\n              )}\r\n            </ContextMenu>\r\n          </div>,\r\n          document.body\r\n        )}\r\n      </div>\r\n      {(pagination || showSelectedRows) && (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          {showSelectedRows ? (\r\n            <div\r\n              className=\"footer-bottom\"\r\n              style={{\r\n                width: \"25%\",\r\n                height: 25,\r\n                backgroundColor: \"#f8f8f8\",\r\n                color: \"black\",\r\n                fontSize: 12,\r\n                paddingRight: 15,\r\n                fontWeight: \"bold\",\r\n                display: \"flex\",\r\n                justifyContent: \"flex-start\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              {`Selected : ${selectedRows.length}`}\r\n            </div>\r\n          ) : undefined}\r\n          {pagination && !suppressPagination && (\r\n            <Pagination\r\n              className=\"pagination-data\"\r\n              showTotal={(total, range) =>\r\n                `Showing ${range[0]}-${range[1]} of ${total}`\r\n              }\r\n              onChange={PaginationChange}\r\n              total={rawRows.length}\r\n              current={current}\r\n              pageSize={size}\r\n              showSizeChanger={false}\r\n              itemRender={PrevNextArrow}\r\n              onShowSizeChange={PerPageChange}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction isSamePosition(p1, p2) {\r\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\r\n}\r\n\r\nexport default forwardRef(DataGrid);\r\n"],"names":["cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","rowIsSelected","rowIsSelectedClassName","topRowIsSelected","topRowIsSelectedClassName","bottomRowIsSelected","bottomRowIsSelectedClassName","root","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","filterColumnClassName","filterContainerClassname","row","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","checkboxFormatter","onChange","props","ref","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","clsx","disabled","_jsx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","useRef","current","focus","preventScroll","tabIndex","DataGridDefaultComponentsContext","createContext","undefined","DataGridDefaultComponentsProvider","Provider","useDefaultComponents","useContext","SelectCellFormatter","value","isCellSelected","ariaLabel","ariaLabelledBy","valueFormatter","_Fragment","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","toggleGroupFormatter","ToggleGroup","groupKey","isExpanded","toggleGroup","handleKeyDown","d","SERIAL_NUMBER_COLUMN_KEY","SELECT_COLUMN_KEY","headerCellClassName","SelectFormatter","isRowSelected","onRowSelectionChange","useRowSelection","isShiftClick","SelectGroupFormatter","SelectColumn","name","width","minWidth","maxWidth","resizable","sortable","frozen","filter","headerRenderer","allRowsSelected","onAllRowsSelectionChange","cellRenderer","groupFormatter","SerialNumberColumn","cellClass","rowIndex","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","idx","scrollIntoView","element","inline","block","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","event","has","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","measuringCellClassname","renderMeasuringCells","viewportColumns","map","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","cellEditor","rowGroup","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","topSummaryRowsCount","length","minRowIdx","type","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","getRowStyle","height","getCellStyle","rowSpan","gridColumnEnd","gridRowEnd","insetInlineStart","getCellClassname","extraClasses","isLastFrozenColumn","min","max","round","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","Error","clampColumnWidth","textEditorInternalClassname","textEditorClassname","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","frameworkComponents","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","formatter","defaultSortable","defaultResizable","defaultFilter","dilter","groupBy","useMemo","rawColumn","includes","field","cellRendererValue","components","Object","keys","indexOfComponent","indexOf","customComponentName","colId","userProvidedColDef","onRowChange","sort","aKey","frozenA","bKey","frozenB","forEach","push","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","left","Map","get","set","columnMetric","gridTemplateColumns","join","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useGridDimensions","gridRef","inlineSize","setInlineSize","useState","blockSize","setBlockSize","isWidthInitialized","setWidthInitialized","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","getBoundingClientRect","initialWidth","initialHeight","resizeObserver","entries","size","contentBoxSize","observe","disconnect","useLatestFunc","fn","callbackFn","useCallback","useRovingCellRef","isChildFocused","setIsChildFocused","contains","document","activeElement","onFocus","currentTarget","isFocused","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","rowSelectionContext","rowSelectionChangeContext","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","flexWidthViewportColumns","unsizedFlexWidthViewportColumns","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","paginationPageSize","pagination","expandAll","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","posInSet","id","groupRow","setSize","add","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","numberOfRows","slice","FilterContext","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","filterClassname","HeaderRenderer","sortDirection","priority","onSort","setFilters","rest","alterHeaderName","charAt","toUpperCase","headerName","filters","inputStopPropagation","SortableHeaderCell","children","sortStatus","preventDefault","handleClick","stopPropagation","FilterRenderer","enabled","cellResizable","cellResizableClassname","HeaderCell","onColumnResize","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","selectedCellHeaderStyle","direction","handleReorderColumn","isRtl","sortIndex","findIndex","columnKey","sortColumn","ariaSort","style","className","headerCellClass","defaultHeaderRenderer","onPointerDown","pointerType","buttons","pointerId","right","clientX","onPointerMove","onLostPointerCapture","removeEventListener","setPointerCapture","addEventListener","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","onClick","onDoubleClick","handleFocus","handleColumnsReorder","sourceKey","targetKey","sourceColumnIndex","c","targetColumnIndex","reorderedColumns","isDragging","drag","useDrag","item","collect","monitor","isOver","drop","useDrop","accept","canDrop","ele","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","cells","index","DndProvider","HTML5Backend","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","api","isDraggedOver","allrow","dragHandle","onRowClick","onRowDoubleClick","node","handleReorderRow","totalColumns","onCellClick","onCellDoubleClick","onCellContextMenu","columnApi","topRow","bottomRow","middleRow","selectCellWrapper","openEditor","editorOptions","editOnClick","data","colDef","handleContextMenu","handleDoubleClick","handleRowChange","newRow","borderInlineStart","borderInlineEnd","validation","validationStyle","backgroundColor","method","alignment","alignmentUtils","styles","symbol","moment","isValid","toLowerCase","alignmentStyle","align","textAlign","JSON","stringify","ley","onRowReorder","fromIndex","toIndex","newRows","renderObject","rowDrag","marginRight","cursor","Row","gridRowStart","copiedCellIdx","draggedOverCellIdx","selectedCellRowStyle","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","handleDragEnter","selectedCellRowIndex","RowComponent","forwardRef","defaultRowRenderer","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","groupRowClassname","GroupedRow","selectGroup","handleSelectGroup","summaryCellClassname","SummaryCell","summaryCellClass","summaryFormatter","summaryRow","topSummaryRow","topSummaryRowBorderClassname","bottomSummaryRowBorderClassname","summaryRowClassname","topSummaryRowClassname","SummaryRow","bottom","lastTopRowIdx","ariaRowIndex","isTop","cellEditing","EditCell","closeEditor","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","onKeyDown","onNavigation","commitChanges","renderFormatter","console","log","valueFormatted","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","endRowIndex","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","arrow","arrowClassname","sortIcon","sortPriority","CSVContent","fileData","header","f","sample","content","serialiseCellValue","exportToCsv","fileName","downloadFile","Blob","exportToPdf","dataKey","doc","jsPDF","autoTable","html","margin","cellWidth","overflow","halign","headStyles","fillColor","textColor","lineColor","lineWidth","body","theme","save","exportToXlsx","fileType","fileExtension","ws","XLSX","utils","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","write","bookType","FileSaver","saveAs","formattedValue","replace","downloadLink","createElement","download","url","URL","createObjectURL","href","click","revokeObjectURL","ExportButton","onExport","exporting","setExporting","initialPosition","mode","DataGrid","raawColumns","columnData","raawRows","rowData","rowKeyGetter","rawRowHeight","rawHeaderRowHeight","headerRowHeight","rawSummaryRowHeight","summaryRowHeight","selectedRows","onSelectedRowsChange","raawGroupBy","onExpandedGroupIdsChange","onRowClicked","onRowDoubleClicked","onScroll","serialNumber","onCopy","onPaste","onCellClicked","onCellDoubleClicked","rawCellNavigationMode","rawEnableVirtualization","renderers","showSelectedRows","rawDirection","getContextMenuItems","ariaDescribedBy","testId","columnReordering","tablePagination","suppressPaginationPanel","paginationAutoPageSize","defaultPage","onGridReady","selectedRows1","onSelectedRowsChange1","selection","enableFilter","contextMenuItems","contextMenuRowRenderer","ContextMenuTrigger","headerHeightFromRef","setHeaderHeightFromRef","defaultComponents","headerWithFilter","rowRenderer","defaultSortStatus","defaultCheckboxFormatter","noRowsFallback","afterFilter","setAfterFilter","defaultColumnDef","setDefaultColumnDef","setRawGroupBy","setExpandAll","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","draggedOverRowIdx","setOverRowIdx","setSortColumns","setRawRows","setRawColumns","setPagination","suppressPagination","setCurrent","PaginationChange","page","pageSize","PrevNextArrow","originalElement","PerPageChange","newPerPage","ceil","defaultFilters","rawCol","filterFunction","val","sortedRows","asArray","filteredRows","a","b","localeCompare","reverse","prevSelectedPosition","lastSelectedRowIdx","rowRef","gridWidth","gridHeight","headerRowsCount","bottomSummaryRowsCount","summaryRowsCount","isSelectable","leftKey","rightKey","defaultGridComponents","every","getColumnWidths","from","columnKeys","values","columnWidthValues","columnWidth","getColumns","columnObjects","userColDef","indexOfRowGroup","indexOfSort","sortCol","columnState","columnIndex","rowGroupIndex","colChild","moveColumn","colKey","moveColumns","columnsToMove","sourceColumns","col","valueAtPosition","v","moveColumnByIndex","getDisplayNameForColumn","location","displayNameForCol","getDisplayedColAfter","displayedColAfterKey","nextCol","parentColumn","displayedColAfter","colObj","getDisplayedColBefore","displayedColBeforeKey","prevCol","displayedColBefore","getRowGroupColumns","rowGroupColumns","colObject","setRowGroupColumns","colKeys","addRowGroupColumn","addRowGroupColumns","removeRowGroupColumn","indexOfKey","removeRowGroupColumns","moveRowGroupColumn","setColumnWidth","newWidth","newColumnWidths","setColumnsWidth","newColWidths","colWidth","autoSizeColumn","handleColumnResize","autoSizeColumns","newTemplateColumns","measuringCell","querySelector","measuredWidth","measuredWidthPx","autoSizeAllColumns","sizeColumnsToFit","widthSum","colWidthValues","scale","colWidths","sum","getColumnState","colStates","colState","applyColumnState","state","defaultState","isString","match","groupCol","keysOfColumns","isPinning","setColumnPinned","setColumnsPinned","j","getSortColumns","columnApiObject","columnModel","columnDefs","setPrototypeOf","getColumn","columnObj","getAllGridColumns","getAllDisplayedVirtualColumns","getAllDisplayedColumns","resetColumnState","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","handleColumnResizeLatest","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectRowLatest","selectRow","selectAllRowsLatest","selectAllRows","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","selectTopSummaryCellLatest","selectBottomSummaryCellLatest","toggleGroupLatest","isSamePosition","grid","useImperativeHandle","scrollToColumn","scrollToRow","scrollTo","behavior","apiObject","newSelectedRows","newSelectedRows1","childRow","rowKey","delete","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","closest","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","isRowIdxWithinViewportBounds","navigate","handleCellInput","handleScroll","flushSync","getRawRowIdx","rawRowIdx","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","targetColumnKey","onCellKeyDown","isDefaultPrevented","originalRow","isColIdxWithinSelectionBounds","isCellAtLeftBoundary","isCellAtRightBoundary","getNextPosition","parentRowIdx","parentRow","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getLayoutCssVars","handleFill","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","endRowIdxForRender","RowNodes","setRowNodes","forEachNode","newFunction","getRowBounds","rowTop","isRowPresent","object1","result","obj","_","isEqual","getNodesInRangeForSelection","obj1","obj2","firstIndex","secondIndex","startIndex","endIndex","getModelObject","getRow","getRowNode","idValue","getRowCount","getTopLevelRowCount","getTopLevelRowDisplayedIndex","getRowIndexAtPixel","pixel","isEmpty","isRowsToRender","getType","isLastRowIndexKnown","applyTransaction","transactionObject","updatedRowNodes","added","updated","removed","isUpdated","rowIndex1","addIndex","findRowIndex","newRowNode","createNewRowNode","LeafNodes","update","remove","setDataValue","setRowData","getAllLeafNodes","leafNodes","childIndex","lastChild","firstChild","String","forEachLeafNode","callback","rowNodes","updatedLeafNodes","forEachLeafNodeAfterFilter","forEachLeafNodeAfterFilterAndSort","getSelectedRows","selectAll","deselectAll","getSelectedNodes","selectedNodes","selected","selectAllFiltered","deselectAllFiltered","totalPages","paginationGoToPage","pageNumberNew","paginationGoToNextPage","paginationGoToPreviousPage","getFocusedCell","setFocusedCell","tabToNextCell","columnLength","rowsLength","tabToPreviousCell","exportDataAsCsv","exportDataAsExcel","exportDataAsPdf","isAnyFilterPresent","filterPresent","getViewportRowsSample","rowArray","rowElementsSample","listOfRows","selectedRowIdx","isRowOutsideViewport","viewportRowIdx","newValue","list","setData","parent","allLeafChildren","childrenAfterFilter","childrenAfterSort","expanded","setSelected","isExpandable","setExpanded","expandIds","updateData","getColumnDefs","setColumnDefs","getRowNodes","setHeaderHeight","getDisplayedRowCount","getDisplayedRowAtIndex","getFirstDisplayedRow","getLastDisplayedRow","getModel","getValue","rowNode","getRenderedNodes","renderedRowNodes","paginationIsLastPageFound","paginationGetPageSize","paginationSetPageSize","newPageSize","paginationGetCurrentPage","paginationGetTotalPages","paginationGetRowCount","paginationGoToFirstPage","paginationGoToLastPage","rowModel","rowsToDisplay","rootNode","displayedColumns","nodeManager","allNodesMap","csvCreator","clearFocusedCell","setDefaultColDef","collapseAll","getFilterModel","setFilterModel","getViewportRows","rowElements","selectedIdx","rowColumns","isGroupRowSelected","cr","templateRows","isGroupRowFocused","getElementById","restriction","copy","paste","toolbarClassname","export","csvFileName","excelFileName","pdfFileName","scrollPaddingInlineStart","scrollPaddingBlock","summaryRowIdx","isSummaryRowSelected","createPortal","ContextMenu","subMenu","SubMenu","subItem","MenuItem","action","display","justifyContent","color","fontSize","paddingRight","fontWeight","alignItems","total","range","p1","p2"],"mappings":"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"}